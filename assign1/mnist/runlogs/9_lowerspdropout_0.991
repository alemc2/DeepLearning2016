      -- a typical modern convolution network (conv+relu+pool)
      model = nn.Sequential()

      -- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialDropout(0.25))
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 3 : standard 2-layer neural network
      model:add(nn.View(nstates[2]*filtsize*filtsize))
      model:add(nn.Dropout(0.5))
      model:add(nn.Linear(nstates[2]*filtsize*filtsize, nstates[3]))
      model:add(nn.ReLU())
      model:add(nn.Linear(nstates[3], noutputs))



==> processing options	
==> switching to CUDA	
==> executing all	
==> downloading dataset	
==> using reduced training data, with part of that as test/validation data	
==> loading dataset	
==> preprocessing data	
==> preprocessing data: normalize globally	
==> verify statistics	
training data mean: -1.5106435531228e-08	
training data standard deviation: 1.0000000156287	
test data mean: 0.012629995727272	
test data standard deviation: 1.0162751665024	
==> visualizing data	
==> define parameters	
==> construct model	
==> here is the model:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
  (1): nn.SpatialConvolutionMM(1 -> 64, 5x5)
  (2): nn.ReLU
  (3): nn.SpatialMaxPooling(2,2,2,2)
  (4): nn.SpatialConvolutionMM(64 -> 64, 5x5)
  (5): nn.ReLU
  (6): nn.SpatialDropout(0.250000)
  (7): nn.SpatialMaxPooling(2,2,2,2)
  (8): nn.View
  (9): nn.Dropout(0.500000)
  (10): nn.Linear(1600 -> 128)
  (11): nn.ReLU
  (12): nn.Linear(128 -> 10)
}
==> define loss	
==> here is the loss function:	
nn.ClassNLLCriterion
==> defining some tools	
==> configuring optimizer	
==> defining training procedure	
==> defining test procedure	
==> training!	
==> doing epoch on training data:	
==> online epoch # 1 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.93174548943837ms	
ConfusionMatrix:
[[    1137       0      14       9       2       6      19       7      10       2]   94.279% 	[class: 1]
 [       3    1269      16      12       8       0       0      15      22       6]   93.930% 	[class: 2]
 [      15      12    1021      33      11       5      13      32      25       9]   86.820% 	[class: 3]
 [       9      10      41    1064       3      33       5      28      24      11]   86.645% 	[class: 4]
 [       8       6       8       7    1057       1      13      13      12      59]   89.274% 	[class: 5]
 [      15       9       7      43       7     890      19       9      37      12]   84.924% 	[class: 6]
 [      24      14       9       4      14      17    1112       5       9       0]   92.053% 	[class: 7]
 [      10      12      20      11      10       2       0    1154       5      55]   90.227% 	[class: 8]
 [      21      32      22      24      18      33      17       6     926      28]   82.165% 	[class: 9]
 [      15       8      11      16      48      12       2      55      22    1004]]  84.158% 	[class: 0]
 + average row correct: 88.447337150574% 
 + average rowUcol correct (VOC measure): 79.484763741493% 
 + global correct: 88.616666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s50ms | Step: 0ms      

==> time to test 1 sample = 0.42764151096344ms	
ConfusionMatrix:
[[     197       0       0       0       0       1       1       0       0       0]   98.995% 	[class: 1]
 [       0     218       3       0       0       1       0       0       0       0]   98.198% 	[class: 2]
 [       0       0     171       1       1       0       1      11       6       0]   89.529% 	[class: 3]
 [       0       0       5     211       0       1       1       5       0       3]   93.363% 	[class: 4]
 [       0       0       0       0     173       0       0       1       0      11]   93.514% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       1       1       2       5       0       2       0       0     186       9]   90.291% 	[class: 9]
 [       0       0       0       1       0       1       0       2       0     200]]  98.039% 	[class: 0]
 + average row correct: 96.033625602722% 
 + average rowUcol correct (VOC measure): 92.457131147385% 
 + global correct: 96%
0.96033625602722	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 2 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.93143341938655ms	
ConfusionMatrix:
[[    1180       2       5       1       0       2       9       1       2       4]   97.844% 	[class: 1]
 [       0    1303      18       2       4       0       2       5      14       3]   96.447% 	[class: 2]
 [       6      14    1107      14       1       2       2      19       8       3]   94.133% 	[class: 3]
 [       3       4      19    1158       0      14       1      10       9      10]   94.300% 	[class: 4]
 [       0       2       4       0    1133       1      11       4       4      25]   95.693% 	[class: 5]
 [       6       1       1      13       0     999      11       1      10       6]   95.324% 	[class: 6]
 [       8       1       2       1       8       9    1175       0       4       0]   97.268% 	[class: 7]
 [       2       2      13      10       5       2       0    1219       3      23]   95.309% 	[class: 8]
 [       7      13      11       6       4      15       6       1    1049      15]   93.079% 	[class: 9]
 [       8       1       0       7      16       9       2      20       9    1121]]  93.965% 	[class: 0]
 + average row correct: 95.336132645607% 
 + average rowUcol correct (VOC measure): 91.111813783646% 
 + global correct: 95.366666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s63ms | Step: 0ms      

==> time to test 1 sample = 0.43604850769043ms	
ConfusionMatrix:
[[     197       0       1       0       0       0       1       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     183       0       1       0       1       2       4       0]   95.812% 	[class: 3]
 [       0       1      11     213       0       0       0       1       0       0]   94.248% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       2       0     176       0       0       0       0]   98.876% 	[class: 6]
 [       1       0       0       0       0       1     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       0       2       1       0       2       0       0     199       1]   96.602% 	[class: 9]
 [       0       0       2       0       6       3       0       2       2     189]]  92.647% 	[class: 0]
 + average row correct: 97.457766532898% 
 + average rowUcol correct (VOC measure): 94.974710941315% 
 + global correct: 97.4%
0.97457766532898	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 3 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93115224440893ms	
ConfusionMatrix:
[[    1177       2       5       1       1       4       7       0       4       5]   97.595% 	[class: 1]
 [       0    1315       9       3       2       1       2       6      10       3]   97.335% 	[class: 2]
 [       2       8    1133       9       3       1       2       9       7       2]   96.344% 	[class: 3]
 [       4       4      13    1167       1      14       0      12       7       6]   95.033% 	[class: 4]
 [       1       2       2       1    1147       1       5       3       3      19]   96.875% 	[class: 5]
 [       1       1       1      10       1    1008       7       3      12       4]   96.183% 	[class: 6]
 [       6       2       1       0       3       7    1183       0       6       0]   97.930% 	[class: 7]
 [       1       3      10       8       5       1       0    1234       3      14]   96.482% 	[class: 8]
 [       6       9       8       3       3      10       6       4    1070       8]   94.942% 	[class: 9]
 [       8       2       2       4      21       7       0      16       7    1126]]  94.384% 	[class: 0]
 + average row correct: 96.310330033302% 
 + average rowUcol correct (VOC measure): 92.890169024467% 
 + global correct: 96.333333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s64ms | Step: 0ms      

==> time to test 1 sample = 0.43801307678223ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     182       0       0       0       1       4       4       0]   95.288% 	[class: 3]
 [       0       0       4     221       0       1       0       0       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     181       0       0       2       0       2]   97.838% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       1       0       0       0       1       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       3       0       1       1       1       3       0       0     191       6]   92.718% 	[class: 9]
 [       0       0       0       0       0       0       0       0       0     204]]  100.000% 	[class: 0]
 + average row correct: 98.110761642456% 
 + average rowUcol correct (VOC measure): 96.261432170868% 
 + global correct: 98.1%
0.98110761642456	
==> found new best model!	
==> increasing patience from 5 to 6	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 4 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.9300658305486ms	
ConfusionMatrix:
[[    1190       0       2       0       2       0       8       0       2       2]   98.673% 	[class: 1]
 [       1    1325      10       2       2       0       2       5       4       0]   98.075% 	[class: 2]
 [       3       5    1134      14       3       0       1      10       5       1]   96.429% 	[class: 3]
 [       1       2      12    1187       0      11       0       6       5       4]   96.661% 	[class: 4]
 [       0       2       2       0    1154       0       5       5       2      14]   97.466% 	[class: 5]
 [       3       1       2       8       0    1010      10       0      10       4]   96.374% 	[class: 6]
 [       6       4       0       0       1      11    1181       0       5       0]   97.765% 	[class: 7]
 [       1       2      11       2       2       0       0    1240       4      17]   96.951% 	[class: 8]
 [       3       3       7       3       4      10       5       1    1082       9]   96.007% 	[class: 9]
 [       6       2       1       4      13       6       1      14       5    1141]]  95.641% 	[class: 0]
 + average row correct: 97.004286646843% 
 + average rowUcol correct (VOC measure): 94.193108081818% 
 + global correct: 97.033333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s74ms | Step: 0ms      

==> time to test 1 sample = 0.44928193092346ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     219       1       0       0       0       1       0       1       0]   98.649% 	[class: 2]
 [       0       0     183       0       1       0       1       3       3       0]   95.812% 	[class: 3]
 [       0       0       4     218       0       1       0       1       2       0]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       3       0       0       0       0     201       0       0]   98.529% 	[class: 8]
 [       2       0       1       0       0       2       0       0     201       0]   97.573% 	[class: 9]
 [       0       0       0       1       0       0       0       1       3     199]]  97.549% 	[class: 0]
 + average row correct: 98.248547911644% 
 + average rowUcol correct (VOC measure): 96.506420969963% 
 + global correct: 98.2%
0.98248547911644	
==> found new best model!	
==> increasing patience from 6 to 8	
==> patience: 8	
==> doing epoch on training data:	
==> online epoch # 5 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.92928900321325ms	
ConfusionMatrix:
[[    1191       1       2       0       1       2       5       0       2       2]   98.756% 	[class: 1]
 [       1    1330       7       2       1       1       2       5       2       0]   98.446% 	[class: 2]
 [       4       7    1137       7       1       0       1       8       8       3]   96.684% 	[class: 3]
 [       1       1       9    1193       0       9       0       7       4       4]   97.150% 	[class: 4]
 [       0       2       1       0    1155       0       4       2       1      19]   97.551% 	[class: 5]
 [       1       1       1      13       2    1016       7       0       5       2]   96.947% 	[class: 6]
 [       4       1       1       0       4       4    1188       0       6       0]   98.344% 	[class: 7]
 [       1       2       7       4       4       0       0    1250       0      11]   97.733% 	[class: 8]
 [       3       2       2       6       5       7       7       1    1087       7]   96.451% 	[class: 9]
 [       3       2       1       2      12       6       0      10       9    1148]]  96.228% 	[class: 0]
 + average row correct: 97.428829669952% 
 + average rowUcol correct (VOC measure): 95.003094673157% 
 + global correct: 97.458333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s43ms | Step: 0ms      

==> time to test 1 sample = 0.43824851512909ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     183       1       0       0       0       4       3       0]   95.812% 	[class: 3]
 [       0       0       5     220       0       0       0       0       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       0       0       0       1]   98.876% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       1       0       0       0     201       1       0]   98.529% 	[class: 8]
 [       0       1       2       0       0       1       0       0     202       0]   98.058% 	[class: 9]
 [       0       0       0       1       0       0       0       0       2     201]]  98.529% 	[class: 0]
 + average row correct: 98.610706925392% 
 + average rowUcol correct (VOC measure): 97.293137907982% 
 + global correct: 98.6%
0.98610706925392	
==> found new best model!	
==> increasing patience from 8 to 10	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 6 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93167324860891ms	
ConfusionMatrix:
[[    1189       2       3       0       2       2       5       0       1       2]   98.590% 	[class: 1]
 [       0    1336       3       4       3       0       0       0       4       1]   98.890% 	[class: 2]
 [       3       6    1137       5       6       0       0      13       6       0]   96.684% 	[class: 3]
 [       1       1       8    1190       0      12       0       7       5       4]   96.906% 	[class: 4]
 [       1       3       5       1    1150       0       4       4       0      16]   97.128% 	[class: 5]
 [       1       0       1      10       0    1025       0       1       7       3]   97.805% 	[class: 6]
 [       3       1       0       0       3       3    1194       0       4       0]   98.841% 	[class: 7]
 [       1       2      12       3       2       0       0    1246       3      10]   97.420% 	[class: 8]
 [       3       2       5       4       1       6       7       2    1092       5]   96.894% 	[class: 9]
 [       3       2       2       4      17       3       1       9       2    1150]]  96.396% 	[class: 0]
 + average row correct: 97.55539894104% 
 + average rowUcol correct (VOC measure): 95.240642428398% 
 + global correct: 97.575%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s73ms | Step: 0ms      

==> time to test 1 sample = 0.43790805339813ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     210       2       0       2       1       3       1       3       0]   94.595% 	[class: 2]
 [       0       0     183       0       0       0       1       2       5       0]   95.812% 	[class: 3]
 [       0       0       2     221       0       1       0       0       2       0]   97.788% 	[class: 4]
 [       0       0       0       0     183       0       0       0       0       2]   98.919% 	[class: 5]
 [       0       0       0       1       0     176       1       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     202       1       0]   99.020% 	[class: 8]
 [       0       0       0       2       0       0       0       0     203       1]   98.544% 	[class: 9]
 [       1       0       0       1       0       1       0       0       2     199]]  97.549% 	[class: 0]
 + average row correct: 98.009634017944% 
 + average rowUcol correct (VOC measure): 96.04154586792% 
 + global correct: 97.95%
0.98009634017944	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 7 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.96398615837097ms	
ConfusionMatrix:
[[    1190       1       3       2       0       1       5       1       2       1]   98.673% 	[class: 1]
 [       0    1333       5       3       2       0       2       3       2       1]   98.668% 	[class: 2]
 [       2       6    1144       7       2       0       0       8       6       1]   97.279% 	[class: 3]
 [       1       1       8    1195       0      11       0       3       4       5]   97.313% 	[class: 4]
 [       0       1       0       0    1164       0       5       1       0      13]   98.311% 	[class: 5]
 [       0       1       1      10       0    1028       4       0       4       0]   98.092% 	[class: 6]
 [       4       1       0       0       4       3    1191       0       5       0]   98.593% 	[class: 7]
 [       1       1       8       2       3       1       0    1248       1      14]   97.576% 	[class: 8]
 [       6       3       4       3       0       7       6       2    1088       8]   96.539% 	[class: 9]
 [       3       0       1       2      12       3       0       5       6    1161]]  97.318% 	[class: 0]
 + average row correct: 97.836109399796% 
 + average rowUcol correct (VOC measure): 95.761709809303% 
 + global correct: 97.85%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s527ms | Step: 0ms     

==> time to test 1 sample = 0.47197592258453ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       1     219       0       0       0       0       0       0       2       0]   98.649% 	[class: 2]
 [       0       0     184       0       0       0       1       3       3       0]   96.335% 	[class: 3]
 [       0       0       5     220       0       0       0       0       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       2       1       1       0       0       0       0       0     202       0]   98.058% 	[class: 9]
 [       1       0       1       0       0       0       0       2       4     196]]  96.078% 	[class: 0]
 + average row correct: 98.590374588966% 
 + average rowUcol correct (VOC measure): 97.218659520149% 
 + global correct: 98.55%
0.98590374588966	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 8 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9884575009346ms	
ConfusionMatrix:
[[    1191       0       0       0       1       2       8       2       2       0]   98.756% 	[class: 1]
 [       1    1337       5       1       2       0       0       3       2       0]   98.964% 	[class: 2]
 [       1       6    1151       4       2       0       1       8       2       1]   97.874% 	[class: 3]
 [       0       2       5    1203       0       9       0       4       3       2]   97.964% 	[class: 4]
 [       0       0       3       0    1161       1       3       1       1      14]   98.057% 	[class: 5]
 [       1       0       1       4       0    1026       5       0       8       3]   97.901% 	[class: 6]
 [       4       2       0       1       1       3    1196       0       1       0]   99.007% 	[class: 7]
 [       1       3       7       5       0       0       0    1253       3       7]   97.967% 	[class: 8]
 [       5       2       2       1       3      10       2       1    1099       2]   97.516% 	[class: 9]
 [       4       0       2       3       7       4       0      10       5    1158]]  97.066% 	[class: 0]
 + average row correct: 98.107199072838% 
 + average rowUcol correct (VOC measure): 96.284872293472% 
 + global correct: 98.125%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s765ms | Step: 0ms     

==> time to test 1 sample = 0.44429540634155ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       1     185       0       1       0       0       2       2       0]   96.859% 	[class: 3]
 [       0       0       2     224       0       0       0       0       0       0]   99.115% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       0       2       0       1       0       0     202       0]   98.058% 	[class: 9]
 [       0       0       0       1       3       0       0       0       0     200]]  98.039% 	[class: 0]
 + average row correct: 99.102809429169% 
 + average rowUcol correct (VOC measure): 98.221205472946% 
 + global correct: 99.1%
0.99102809429169	
==> found new best model!	
==> increasing patience from 10 to 16	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 9 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94379033644994ms	
ConfusionMatrix:
[[    1194       0       0       0       0       2       5       0       2       3]   99.005% 	[class: 1]
 [       0    1334       6       0       3       0       2       3       3       0]   98.742% 	[class: 2]
 [       0       5    1158       4       1       0       0       5       3       0]   98.469% 	[class: 3]
 [       2       0       3    1206       0       5       0       6       2       4]   98.208% 	[class: 4]
 [       1       1       1       0    1166       0       1       1       5       8]   98.480% 	[class: 5]
 [       1       0       0       6       1    1029       2       0       6       3]   98.187% 	[class: 6]
 [       5       1       1       0       1       2    1197       0       1       0]   99.089% 	[class: 7]
 [       0       4       6       3       4       0       0    1256       0       6]   98.202% 	[class: 8]
 [       3       2       3       5       3       4       3       1    1098       5]   97.427% 	[class: 9]
 [       3       1       0       3       5       5       0       5       6    1165]]  97.653% 	[class: 0]
 + average row correct: 98.346216082573% 
 + average rowUcol correct (VOC measure): 96.74819290638% 
 + global correct: 98.358333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s193ms | Step: 0ms     

==> time to test 1 sample = 0.42544639110565ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     185       0       0       0       1       3       2       0]   96.859% 	[class: 3]
 [       0       0       4     221       0       0       0       1       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       0       0       1       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       1       1       0       0       1       0       0     202       0]   98.058% 	[class: 9]
 [       2       0       1       0       4       0       0       0       2     195]]  95.588% 	[class: 0]
 + average row correct: 98.677797913551% 
 + average rowUcol correct (VOC measure): 97.346413135529% 
 + global correct: 98.65%
0.98677797913551	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 10 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93923248847326ms	
ConfusionMatrix:
[[    1194       1       1       1       1       0       3       0       3       2]   99.005% 	[class: 1]
 [       0    1335       3       3       1       1       2       2       4       0]   98.816% 	[class: 2]
 [       3       5    1144       9       2       0       1       8       4       0]   97.279% 	[class: 3]
 [       0       1       7    1203       0      12       0       2       2       1]   97.964% 	[class: 4]
 [       0       1       1       0    1166       0       0       2       4      10]   98.480% 	[class: 5]
 [       0       0       1       7       0    1021       4       1       7       7]   97.424% 	[class: 6]
 [       4       4       2       0       1       3    1193       0       1       0]   98.758% 	[class: 7]
 [       0       1       4       2       2       0       0    1258       4       8]   98.358% 	[class: 8]
 [       2       1       5       1       1       6       4       4    1095       8]   97.161% 	[class: 9]
 [       3       1       0       2      11       5       1       7       5    1158]]  97.066% 	[class: 0]
 + average row correct: 98.031033873558% 
 + average rowUcol correct (VOC measure): 96.148783564568% 
 + global correct: 98.058333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s169ms | Step: 0ms     

==> time to test 1 sample = 0.44131147861481ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     187       0       0       0       1       1       2       0]   97.906% 	[class: 3]
 [       0       1       5     218       0       2       0       0       0       0]   96.460% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       1       1       0       0       1       0       0     202       0]   98.058% 	[class: 9]
 [       2       0       0       1       0       3       0       1       1     196]]  96.078% 	[class: 0]
 + average row correct: 98.65692615509% 
 + average rowUcol correct (VOC measure): 97.268238663673% 
 + global correct: 98.6%
0.9865692615509	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 11 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94104917844137ms	
ConfusionMatrix:
[[    1198       1       2       1       1       1       0       0       1       1]   99.337% 	[class: 1]
 [       2    1338       7       0       1       0       0       3       0       0]   99.038% 	[class: 2]
 [       1       5    1145       7       1       0       2       8       5       2]   97.364% 	[class: 3]
 [       1       0       4    1208       0       6       1       3       2       3]   98.371% 	[class: 4]
 [       0       2       0       0    1168       0       2       0       2      10]   98.649% 	[class: 5]
 [       0       0       0       5       1    1033       3       0       4       2]   98.569% 	[class: 6]
 [       3       0       1       0       2       1    1199       0       2       0]   99.255% 	[class: 7]
 [       0       1       8       3       1       0       0    1258       0       8]   98.358% 	[class: 8]
 [       6       1       3       3       4       5       0       1    1103       1]   97.870% 	[class: 9]
 [       2       1       1       5       8       4       0       6       3    1163]]  97.485% 	[class: 0]
 + average row correct: 98.42958688736% 
 + average rowUcol correct (VOC measure): 96.913050413132% 
 + global correct: 98.441666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s168ms | Step: 0ms     

==> time to test 1 sample = 0.43140542507172ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       1       0     183       0       1       0       1       2       3       0]   95.812% 	[class: 3]
 [       0       0       3     221       0       1       0       0       0       1]   97.788% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     175       2       0       0       1]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     202       0       2]   99.020% 	[class: 8]
 [       0       1       1       0       1       0       0       0     202       1]   98.058% 	[class: 9]
 [       2       0       0       0       3       0       0       0       0     199]]  97.549% 	[class: 0]
 + average row correct: 98.49950492382% 
 + average rowUcol correct (VOC measure): 97.015684843063% 
 + global correct: 98.5%
0.9849950492382	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 12 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93983433643977ms	
ConfusionMatrix:
[[    1198       1       1       0       0       1       2       0       1       2]   99.337% 	[class: 1]
 [       0    1338       3       2       2       0       1       3       2       0]   99.038% 	[class: 2]
 [       0       6    1150       8       0       0       1       6       4       1]   97.789% 	[class: 3]
 [       1       0       6    1208       0       4       0       3       3       3]   98.371% 	[class: 4]
 [       0       1       2       0    1167       0       2       1       1      10]   98.564% 	[class: 5]
 [       0       0       1       4       0    1034       2       2       4       1]   98.664% 	[class: 6]
 [       2       0       0       0       3       1    1202       0       0       0]   99.503% 	[class: 7]
 [       1       2       4       4       3       0       0    1260       0       5]   98.514% 	[class: 8]
 [       1       1       3       5       1       4       4       1    1103       4]   97.870% 	[class: 9]
 [       5       1       1       2       9       3       0       3       3    1166]]  97.737% 	[class: 0]
 + average row correct: 98.538817763329% 
 + average rowUcol correct (VOC measure): 97.129215598106% 
 + global correct: 98.55%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s181ms | Step: 0ms     

==> time to test 1 sample = 0.444664478302ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       1       2       1       0]   97.382% 	[class: 3]
 [       0       0       4     220       0       1       0       1       0       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       1       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       0       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       1       0       0       1     201]]  98.529% 	[class: 0]
 + average row correct: 98.870177268982% 
 + average rowUcol correct (VOC measure): 97.715437412262% 
 + global correct: 98.85%
0.98870177268982	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 13 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 16ms | Step: 1ms         
==> time to learn 1 sample = 0.9870521624883ms	
ConfusionMatrix:
[[    1190       2       2       0       0       0       5       0       3       4]   98.673% 	[class: 1]
 [       1    1338       5       0       0       0       1       5       0       1]   99.038% 	[class: 2]
 [       2       3    1154       4       3       0       0       6       2       2]   98.129% 	[class: 3]
 [       1       0       3    1212       0       9       0       1       0       2]   98.697% 	[class: 4]
 [       0       1       1       0    1165       0       3       1       1      12]   98.395% 	[class: 5]
 [       1       0       0       4       0    1038       2       0       3       0]   99.046% 	[class: 6]
 [       4       1       0       0       2       3    1196       0       2       0]   99.007% 	[class: 7]
 [       2       3       8       2       2       0       0    1257       0       5]   98.280% 	[class: 8]
 [       1       0       5       3       0       4       1       0    1109       4]   98.403% 	[class: 9]
 [       2       0       0       3      10       2       1       8       3    1164]]  97.569% 	[class: 0]
 + average row correct: 98.523696660995% 
 + average rowUcol correct (VOC measure): 97.083727121353% 
 + global correct: 98.525%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s771ms | Step: 0ms     

==> time to test 1 sample = 0.45504748821259ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     189       0       0       0       0       0       2       0]   98.953% 	[class: 3]
 [       0       0       5     221       0       0       0       0       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       2       0     175       1       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       1       1       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       1       0       1       0       0       1       0     201]]  98.529% 	[class: 0]
 + average row correct: 98.913947343826% 
 + average rowUcol correct (VOC measure): 97.820018529892% 
 + global correct: 98.9%
0.98913947343826	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 14 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 1.0162527561188ms	
ConfusionMatrix:
[[    1197       2       1       1       0       0       4       0       1       0]   99.254% 	[class: 1]
 [       1    1338       3       3       1       0       0       1       4       0]   99.038% 	[class: 2]
 [       2       4    1159       4       1       0       0       3       3       0]   98.554% 	[class: 3]
 [       1       2       3    1210       0       6       0       1       2       3]   98.534% 	[class: 4]
 [       0       0       2       0    1171       1       1       2       0       7]   98.902% 	[class: 5]
 [       0       1       1       6       0    1032       2       0       5       1]   98.473% 	[class: 6]
 [       4       1       1       0       2       3    1196       0       1       0]   99.007% 	[class: 7]
 [       0       5       2       1       2       1       0    1261       0       7]   98.593% 	[class: 8]
 [       2       0       3       1       0       4       3       2    1108       4]   98.314% 	[class: 9]
 [       2       1       0       2       8       1       0       6       6    1167]]  97.821% 	[class: 0]
 + average row correct: 98.648941516876% 
 + average rowUcol correct (VOC measure): 97.336003184319% 
 + global correct: 98.658333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 13s117ms | Step: 0ms     

==> time to test 1 sample = 0.45425653457642ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       0       3       1       0]   97.382% 	[class: 3]
 [       0       0       2     223       0       0       0       0       0       1]   98.673% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       1       1       3       0       0     197       2]   95.631% 	[class: 9]
 [       0       0       0       0       1       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.86971116066% 
 + average rowUcol correct (VOC measure): 97.710452675819% 
 + global correct: 98.85%
0.9886971116066	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 15 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.97540815671285ms	
ConfusionMatrix:
[[    1200       0       1       0       0       0       4       0       1       0]   99.502% 	[class: 1]
 [       1    1335       4       0       1       1       0       5       4       0]   98.816% 	[class: 2]
 [       3       4    1154       2       2       1       0       8       2       0]   98.129% 	[class: 3]
 [       0       0       1    1214       0       6       0       0       3       4]   98.860% 	[class: 4]
 [       0       1       1       0    1168       0       1       1       2      10]   98.649% 	[class: 5]
 [       0       0       0       5       0    1033       5       1       4       0]   98.569% 	[class: 6]
 [       3       0       1       0       2       3    1195       0       4       0]   98.924% 	[class: 7]
 [       0       1       6       2       0       0       0    1262       1       7]   98.671% 	[class: 8]
 [       2       0       3       2       0       3       2       1    1109       5]   98.403% 	[class: 9]
 [       0       1       1       2       6       0       1       8       3    1171]]  98.156% 	[class: 0]
 + average row correct: 98.667814135551% 
 + average rowUcol correct (VOC measure): 97.369326353073% 
 + global correct: 98.675%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s596ms | Step: 0ms     

==> time to test 1 sample = 0.43866801261902ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     182       0       0       0       1       2       6       0]   95.288% 	[class: 3]
 [       0       0       4     218       0       2       0       1       1       0]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       1       0]   99.510% 	[class: 8]
 [       1       0       1       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       0       1       1       0       0       6     196]]  96.078% 	[class: 0]
 + average row correct: 98.382475972176% 
 + average rowUcol correct (VOC measure): 96.808248758316% 
 + global correct: 98.35%
0.98382475972176	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 16 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.96160592635473ms	
ConfusionMatrix:
[[    1197       1       1       0       1       1       3       0       2       0]   99.254% 	[class: 1]
 [       0    1339       5       3       0       1       0       3       0       0]   99.112% 	[class: 2]
 [       1       3    1150       5       2       0       1       4       8       2]   97.789% 	[class: 3]
 [       2       0       4    1211       1       6       0       2       1       1]   98.616% 	[class: 4]
 [       1       0       1       0    1169       0       2       0       0      11]   98.733% 	[class: 5]
 [       2       1       1       3       0    1036       1       0       2       2]   98.855% 	[class: 6]
 [       2       0       1       1       6       2    1194       0       2       0]   98.841% 	[class: 7]
 [       0       4       5       2       0       1       0    1261       0       6]   98.593% 	[class: 8]
 [       2       0       3       1       0       3       3       2    1110       3]   98.492% 	[class: 9]
 [       1       0       1       1       8       1       0       3       3    1175]]  98.491% 	[class: 0]
 + average row correct: 98.677480220795% 
 + average rowUcol correct (VOC measure): 97.383522391319% 
 + global correct: 98.683333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s437ms | Step: 0ms     

==> time to test 1 sample = 0.44148147106171ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     221       0       0       0       0       0       1       0       0]   99.550% 	[class: 2]
 [       0       0     189       0       0       0       0       2       0       0]   98.953% 	[class: 3]
 [       0       0       3     222       0       1       0       0       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       1       0       1       0     175       1       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       2       0       1       2       1       1       0       0     199       0]   96.602% 	[class: 9]
 [       0       0       0       0       1       2       0       4       1     196]]  96.078% 	[class: 0]
 + average row correct: 98.571744561195% 
 + average rowUcol correct (VOC measure): 97.133328318596% 
 + global correct: 98.55%
0.98571744561195	
==> out of patience	
==> saving final model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	

