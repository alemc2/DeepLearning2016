      -- a typical modern convolution network (conv+relu+pool)
      model = nn.Sequential()

      -- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialDropout(0.5))
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 3 : standard 2-layer neural network
      model:add(nn.View(nstates[2]*filtsize*filtsize))
      model:add(nn.Dropout(0.25))
      model:add(nn.Linear(nstates[2]*filtsize*filtsize, nstates[3]))
      model:add(nn.ReLU())
      model:add(nn.Linear(nstates[3], noutputs))



==> processing options	
==> switching to CUDA	
==> executing all	
==> downloading dataset	
==> using reduced training data, with part of that as test/validation data	
==> loading dataset	
==> preprocessing data	
==> preprocessing data: normalize globally	
==> verify statistics	
training data mean: -1.5106435531228e-08	
training data standard deviation: 1.0000000156287	
test data mean: 0.012629995727272	
test data standard deviation: 1.0162751665024	
==> visualizing data	
==> define parameters	
==> construct model	
==> here is the model:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
  (1): nn.SpatialConvolutionMM(1 -> 64, 5x5)
  (2): nn.ReLU
  (3): nn.SpatialMaxPooling(2,2,2,2)
  (4): nn.SpatialConvolutionMM(64 -> 64, 5x5)
  (5): nn.ReLU
  (6): nn.SpatialDropout(0.500000)
  (7): nn.SpatialMaxPooling(2,2,2,2)
  (8): nn.View
  (9): nn.Dropout(0.250000)
  (10): nn.Linear(1600 -> 128)
  (11): nn.ReLU
  (12): nn.Linear(128 -> 10)
}
==> define loss	
==> here is the loss function:	
nn.ClassNLLCriterion
==> defining some tools	
==> configuring optimizer	
==> defining training procedure	
==> defining test procedure	
==> training!	
==> doing epoch on training data:	
==> online epoch # 1 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.95537124077479ms	
ConfusionMatrix:
[[    1136       0      13      10       2      14       8       7      11       5]   94.196% 	[class: 1]
 [       1    1261      17      21       7       0       3      13      25       3]   93.338% 	[class: 2]
 [      14      21    1023      43      18       2       9      24      18       4]   86.990% 	[class: 3]
 [      12      10      38    1072       2      25       1      24      21      23]   87.296% 	[class: 4]
 [       6      10      11       8    1056       1      15      18       8      51]   89.189% 	[class: 5]
 [      15      10       7      38       3     899      22      10      32      12]   85.782% 	[class: 6]
 [      17       8      14       7      16      13    1116       6      10       1]   92.384% 	[class: 7]
 [       9      11      17      21      12       5       0    1144       7      53]   89.445% 	[class: 8]
 [      15      34      21      26      15      34      14      16     928      24]   82.342% 	[class: 9]
 [      14       8      10      23      41       8       2      63      17    1007]]  84.409% 	[class: 0]
 + average row correct: 88.537234067917% 
 + average rowUcol correct (VOC measure): 79.656743407249% 
 + global correct: 88.683333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s415ms | Step: 0ms     

==> time to test 1 sample = 0.46728646755219ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     215       3       0       2       0       0       0       2       0]   96.847% 	[class: 2]
 [       0       0     178       0       1       0       1       4       7       0]   93.194% 	[class: 3]
 [       0       0       7     209       1       1       1       2       0       5]   92.478% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     175       2       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     200       0       3]   98.039% 	[class: 8]
 [       2       1       2       2       1       1       0       0     193       4]   93.689% 	[class: 9]
 [       0       0       0       1       4       0       0       0       2     197]]  96.569% 	[class: 0]
 + average row correct: 96.657962203026% 
 + average rowUcol correct (VOC measure): 93.436464071274% 
 + global correct: 96.55%
0.96657962203026	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 2 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9964558283488ms	
ConfusionMatrix:
[[    1184       0       4       1       0       1       8       1       5       2]   98.176% 	[class: 1]
 [       0    1313      11       4       5       1       2       3      12       0]   97.187% 	[class: 2]
 [       1       7    1118      15       4       0       1      15      12       3]   95.068% 	[class: 3]
 [       3       0      12    1163       1      18       3      13       8       7]   94.707% 	[class: 4]
 [       0       7       6       0    1143       0       7       1       1      19]   96.537% 	[class: 5]
 [       3       0       1      14       0    1001       9       1      15       4]   95.515% 	[class: 6]
 [       7       5       2       1       6      13    1169       0       5       0]   96.772% 	[class: 7]
 [       1       3      17      10       5       2       0    1216       3      22]   95.074% 	[class: 8]
 [       5      11       7      10       7      13      10       2    1050      12]   93.168% 	[class: 9]
 [       6       2       1       6      12       7       0      16      11    1132]]  94.887% 	[class: 0]
 + average row correct: 95.709069371223% 
 + average rowUcol correct (VOC measure): 91.787834763527% 
 + global correct: 95.741666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s893ms | Step: 0ms     

==> time to test 1 sample = 0.46029651165009ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       1     180       0       1       0       1       2       6       0]   94.241% 	[class: 3]
 [       0       0       5     217       0       2       1       0       0       1]   96.018% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     176       1       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       4       4       0       0       0     195       0       1]   95.588% 	[class: 8]
 [       0       1       1       1       0       0       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       1       1       1       0       1       3     197]]  96.569% 	[class: 0]
 + average row correct: 97.838002443314% 
 + average rowUcol correct (VOC measure): 95.756006240845% 
 + global correct: 97.8%
0.97838002443314	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 3 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.95185983181ms	
ConfusionMatrix:
[[    1180       2       4       1       0       1      11       0       3       4]   97.844% 	[class: 1]
 [       1    1319      10       1       4       1       3       5       4       3]   97.631% 	[class: 2]
 [       6      13    1125      11       4       0       0       9       8       0]   95.663% 	[class: 3]
 [       3       3      10    1187       0       8       1       6       5       5]   96.661% 	[class: 4]
 [       0       5       2       0    1151       0       5       6       0      15]   97.213% 	[class: 5]
 [       1       1       1      11       0    1016       8       0       6       4]   96.947% 	[class: 6]
 [       7       3       0       0       7       8    1175       0       8       0]   97.268% 	[class: 7]
 [       1       2      14       4       5       0       0    1237       4      12]   96.716% 	[class: 8]
 [       7       5       8       6       5       7       8       2    1070       9]   94.942% 	[class: 9]
 [       4       0       1       3      13       8       1       9       7    1147]]  96.144% 	[class: 0]
 + average row correct: 96.703030467033% 
 + average rowUcol correct (VOC measure): 93.627654910088% 
 + global correct: 96.725%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s311ms | Step: 0ms     

==> time to test 1 sample = 0.43638849258423ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     218       1       0       0       0       1       0       2       0]   98.198% 	[class: 2]
 [       0       0     178       0       1       0       1       5       6       0]   93.194% 	[class: 3]
 [       0       0       5     214       0       2       1       2       0       2]   94.690% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       1       2       0       0       0       0     200       3]   97.087% 	[class: 9]
 [       0       0       0       0       0       0       0       1       1     202]]  99.020% 	[class: 0]
 + average row correct: 98.015339970589% 
 + average rowUcol correct (VOC measure): 96.06464266777% 
 + global correct: 97.95%
0.98015339970589	
==> found new best model!	
==> increasing patience from 5 to 6	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 4 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.95612692832947ms	
ConfusionMatrix:
[[    1189       1       1       1       1       1       4       0       5       3]   98.590% 	[class: 1]
 [       1    1327       8       2       3       0       0       7       2       1]   98.224% 	[class: 2]
 [       3       8    1143       7       0       1       0      11       3       0]   97.194% 	[class: 3]
 [       2       0      10    1191       0       9       0       5       6       5]   96.987% 	[class: 4]
 [       2       4       1       0    1149       0       6       3       2      17]   97.044% 	[class: 5]
 [       2       0       1      12       1    1010       8       0      12       2]   96.374% 	[class: 6]
 [       5       4       2       0       3       4    1183       0       7       0]   97.930% 	[class: 7]
 [       1       4       7       3       6       0       0    1247       2       9]   97.498% 	[class: 8]
 [       4       5       9       6       4      10       4       1    1079       5]   95.741% 	[class: 9]
 [       2       2       3       4      13       4       0      13       4    1148]]  96.228% 	[class: 0]
 + average row correct: 97.181014418602% 
 + average rowUcol correct (VOC measure): 94.543968439102% 
 + global correct: 97.216666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s391ms | Step: 0ms     

==> time to test 1 sample = 0.45112156867981ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     177       3       2       0       1       3       5       0]   92.670% 	[class: 3]
 [       0       0       0     222       0       2       1       1       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       1       1       3       0       0     200       0]   97.087% 	[class: 9]
 [       0       0       0       1       4       5       0       5       4     185]]  90.686% 	[class: 0]
 + average row correct: 97.561356425285% 
 + average rowUcol correct (VOC measure): 95.175116658211% 
 + global correct: 97.55%
0.97561356425285	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 5 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.97854592402776ms	
ConfusionMatrix:
[[    1191       0       2       0       2       1       7       0       1       2]   98.756% 	[class: 1]
 [       0    1331       5       3       3       1       2       3       3       0]   98.520% 	[class: 2]
 [       2       7    1137       8       2       1       1       9       8       1]   96.684% 	[class: 3]
 [       3       1      10    1189       0      11       0       6       2       6]   96.824% 	[class: 4]
 [       1       3       4       0    1152       0       3       0       1      20]   97.297% 	[class: 5]
 [       2       2       1      11       0    1016       4       1       7       4]   96.947% 	[class: 6]
 [       5       0       0       0       1       8    1189       0       5       0]   98.427% 	[class: 7]
 [       0       2      12       2       4       2       0    1241       1      15]   97.029% 	[class: 8]
 [       3       5       6       2       3       8       7       1    1082      10]   96.007% 	[class: 9]
 [       4       1       0       6      10       5       1      16       9    1141]]  95.641% 	[class: 0]
 + average row correct: 97.213190197945% 
 + average rowUcol correct (VOC measure): 94.591758847237% 
 + global correct: 97.241666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s620ms | Step: 0ms     

==> time to test 1 sample = 0.43161153793335ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     220       2       0       0       0       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     184       1       1       0       1       3       1       0]   96.335% 	[class: 3]
 [       0       0       5     218       0       1       1       0       0       1]   96.460% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       2       2       0       0       0     199       1]   96.602% 	[class: 9]
 [       0       0       0       1       3       1       0       0       1     198]]  97.059% 	[class: 0]
 + average row correct: 98.298326730728% 
 + average rowUcol correct (VOC measure): 96.587019562721% 
 + global correct: 98.25%
0.98298326730728	
==> found new best model!	
==> increasing patience from 6 to 10	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 6 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.96327749888102ms	
ConfusionMatrix:
[[    1191       1       2       0       1       1       3       1       1       5]   98.756% 	[class: 1]
 [       2    1332       6       0       1       1       1       4       3       1]   98.594% 	[class: 2]
 [       1       7    1146       3       3       0       0       8       5       3]   97.449% 	[class: 3]
 [       2       1       8    1191       0       8       1       8       6       3]   96.987% 	[class: 4]
 [       0       2       4       0    1160       1       2       3       0      12]   97.973% 	[class: 5]
 [       3       0       2       9       0    1018       4       0       8       4]   97.137% 	[class: 6]
 [       4       1       1       0       1       4    1194       0       3       0]   98.841% 	[class: 7]
 [       1       4       8       4       5       1       0    1243       1      12]   97.185% 	[class: 8]
 [       1       4       6       3       0       8       3       1    1094       7]   97.072% 	[class: 9]
 [       6       2       1       5      12       4       1      11       8    1143]]  95.809% 	[class: 0]
 + average row correct: 97.580330371857% 
 + average rowUcol correct (VOC measure): 95.288016200066% 
 + global correct: 97.6%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s460ms | Step: 0ms     

==> time to test 1 sample = 0.44227993488312ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     183       0       0       0       1       4       3       0]   95.812% 	[class: 3]
 [       0       0       4     219       0       1       1       0       0       1]   96.903% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     175       1       0       0       1]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       0       0       0       1     202]]  99.020% 	[class: 0]
 + average row correct: 98.857499361038% 
 + average rowUcol correct (VOC measure): 97.739602327347% 
 + global correct: 98.85%
0.98857499361038	
==> found new best model!	
==> increasing patience from 10 to 12	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 7 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94810851414998ms	
ConfusionMatrix:
[[    1195       0       3       1       0       1       2       0       3       1]   99.088% 	[class: 1]
 [       1    1333       5       3       1       0       1       5       1       1]   98.668% 	[class: 2]
 [       1       4    1148       7       1       0       1       9       4       1]   97.619% 	[class: 3]
 [       2       5       7    1198       0       7       0       2       1       6]   97.557% 	[class: 4]
 [       0       1       1       0    1166       0       2       1       1      12]   98.480% 	[class: 5]
 [       0       0       1      10       0    1020       7       1       8       1]   97.328% 	[class: 6]
 [       4       1       0       0       1       8    1191       0       3       0]   98.593% 	[class: 7]
 [       1       2       6       4       4       3       0    1252       1       6]   97.889% 	[class: 8]
 [       4       0       3       4       1       5       7       0    1097       6]   97.338% 	[class: 9]
 [       3       2       0       2      10       4       0       8       1    1163]]  97.485% 	[class: 0]
 + average row correct: 98.004466295242% 
 + average rowUcol correct (VOC measure): 96.093859672546% 
 + global correct: 98.025%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s256ms | Step: 0ms     

==> time to test 1 sample = 0.43273293972015ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     220       0       0       1       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     177       2       2       0       1       4       5       0]   92.670% 	[class: 3]
 [       0       1       1     220       0       1       0       1       1       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       1       1     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       0       1       2       0       0     201       0]   97.573% 	[class: 9]
 [       0       0       0       1       9       1       0       2       6     185]]  90.686% 	[class: 0]
 + average row correct: 97.472557425499% 
 + average rowUcol correct (VOC measure): 95.020037889481% 
 + global correct: 97.45%
0.97472557425499	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 8 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.91858257850011ms	
ConfusionMatrix:
[[    1190       0       2       0       1       1       7       0       4       1]   98.673% 	[class: 1]
 [       0    1336       5       0       2       0       1       2       5       0]   98.890% 	[class: 2]
 [       1       6    1149       6       1       0       1       5       6       1]   97.704% 	[class: 3]
 [       0       1       4    1202       0       8       0       6       6       1]   97.883% 	[class: 4]
 [       0       2       1       0    1160       0       4       0       2      15]   97.973% 	[class: 5]
 [       1       0       0       8       0    1028       6       1       1       3]   98.092% 	[class: 6]
 [       4       2       0       1       1       4    1191       0       5       0]   98.593% 	[class: 7]
 [       0       1       7       5       1       1       0    1253       1      10]   97.967% 	[class: 8]
 [       7       2       5       2       2       7       3       2    1094       3]   97.072% 	[class: 9]
 [       3       0       2       2       8       1       0       9       3    1165]]  97.653% 	[class: 0]
 + average row correct: 98.049913048744% 
 + average rowUcol correct (VOC measure): 96.177089214325% 
 + global correct: 98.066666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s915ms | Step: 0ms     

==> time to test 1 sample = 0.43890404701233ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     183       1       1       0       1       3       2       0]   95.812% 	[class: 3]
 [       0       1       0     223       0       1       1       0       0       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       2       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       1       0       1       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       0       0       2       0       0       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       1       5       0       0       1       1     196]]  96.078% 	[class: 0]
 + average row correct: 98.648293614388% 
 + average rowUcol correct (VOC measure): 97.346091270447% 
 + global correct: 98.65%
0.98648293614388	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 9 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9603436589241ms	
ConfusionMatrix:
[[    1198       0       3       0       0       1       4       0       0       0]   99.337% 	[class: 1]
 [       0    1333       7       2       2       0       0       2       3       2]   98.668% 	[class: 2]
 [       2       6    1143       8       3       0       0      10       4       0]   97.194% 	[class: 3]
 [       0       0       7    1201       0      10       0       4       2       4]   97.801% 	[class: 4]
 [       1       0       1       0    1162       0       1       3       3      13]   98.142% 	[class: 5]
 [       1       0       0       8       0    1022       7       1       7       2]   97.519% 	[class: 6]
 [       4       2       1       1       1       5    1192       0       1       1]   98.675% 	[class: 7]
 [       1       2       8       4       3       0       0    1251       4       6]   97.811% 	[class: 8]
 [       3       3       4       2       3       4       3       1    1100       4]   97.604% 	[class: 9]
 [       3       0       1       4       8       5       0       7       3    1162]]  97.402% 	[class: 0]
 + average row correct: 98.015250563622% 
 + average rowUcol correct (VOC measure): 96.112471222878% 
 + global correct: 98.033333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s464ms | Step: 0ms     

==> time to test 1 sample = 0.46204602718353ms	
ConfusionMatrix:
[[     198       0       0       0       0       1       0       0       0       0]   99.497% 	[class: 1]
 [       0     220       0       0       0       1       0       0       1       0]   99.099% 	[class: 2]
 [       0       0     185       0       0       0       1       3       2       0]   96.859% 	[class: 3]
 [       0       0       3     220       1       0       0       0       1       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       0       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       0       1       1       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       0       1       1       0       1       1     200]]  98.039% 	[class: 0]
 + average row correct: 98.820455670357% 
 + average rowUcol correct (VOC measure): 97.634524106979% 
 + global correct: 98.8%
0.98820455670357	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 10 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.95404708385468ms	
ConfusionMatrix:
[[    1190       1       1       0       0       0       5       1       5       3]   98.673% 	[class: 1]
 [       1    1334       8       1       4       1       1       0       0       1]   98.742% 	[class: 2]
 [       1       4    1154       9       2       0       1       3       2       0]   98.129% 	[class: 3]
 [       1       1       7    1209       0       4       0       3       1       2]   98.453% 	[class: 4]
 [       0       4       1       0    1165       1       3       2       1       7]   98.395% 	[class: 5]
 [       2       2       0       2       0    1033       3       1       3       2]   98.569% 	[class: 6]
 [       3       1       0       1       2       5    1194       0       2       0]   98.841% 	[class: 7]
 [       0       3       2       2       4       0       0    1258       1       9]   98.358% 	[class: 8]
 [       1       0       2       3       1       0       4       2    1109       5]   98.403% 	[class: 9]
 [       5       1       0       1      11       3       2       9       1    1160]]  97.234% 	[class: 0]
 + average row correct: 98.379682898521% 
 + average rowUcol correct (VOC measure): 96.815714836121% 
 + global correct: 98.383333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s339ms | Step: 0ms     

==> time to test 1 sample = 0.43833601474762ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     184       0       1       0       1       3       2       0]   96.335% 	[class: 3]
 [       0       0       4     217       0       1       0       1       2       1]   96.018% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       1       1       0       1       3     197]]  96.569% 	[class: 0]
 + average row correct: 98.744497299194% 
 + average rowUcol correct (VOC measure): 97.462857961655% 
 + global correct: 98.7%
0.98744497299194	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 11 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9550594886144ms	
ConfusionMatrix:
[[    1198       0       1       0       0       1       3       1       1       1]   99.337% 	[class: 1]
 [       0    1340       2       1       0       0       2       3       2       1]   99.186% 	[class: 2]
 [       1       3    1151       1       1       0       1      11       6       1]   97.874% 	[class: 3]
 [       1       2       6    1204       0       5       0       5       3       2]   98.046% 	[class: 4]
 [       1       1       3       0    1164       0       2       2       1      10]   98.311% 	[class: 5]
 [       0       0       1       6       0    1029       4       1       4       3]   98.187% 	[class: 6]
 [       2       2       1       0       4       3    1194       0       2       0]   98.841% 	[class: 7]
 [       1       1       7       5       2       3       0    1250       3       7]   97.733% 	[class: 8]
 [       3       2       0       4       2       5       2       2    1105       2]   98.048% 	[class: 9]
 [       2       1       0       0       8       2       0       7       5    1168]]  97.904% 	[class: 0]
 + average row correct: 98.34660410881% 
 + average rowUcol correct (VOC measure): 96.7520403862% 
 + global correct: 98.358333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s330ms | Step: 0ms     

==> time to test 1 sample = 0.42660140991211ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     218       2       0       0       1       0       0       1       0]   98.198% 	[class: 2]
 [       0       0     185       0       1       0       1       2       2       0]   96.859% 	[class: 3]
 [       0       0       5     219       0       1       0       0       0       1]   96.903% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     200       0       2]   98.039% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.801805377007% 
 + average rowUcol correct (VOC measure): 97.570538520813% 
 + global correct: 98.75%
0.98801805377007	
==> patience: 12	
==> doing epoch on training data:	
==> online epoch # 12 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9853620727857ms	
ConfusionMatrix:
[[    1198       1       1       0       0       2       1       1       1       1]   99.337% 	[class: 1]
 [       0    1340       4       1       1       1       1       1       2       0]   99.186% 	[class: 2]
 [       3       5    1150       5       1       0       0       6       5       1]   97.789% 	[class: 3]
 [       1       1       7    1203       0       5       0       4       4       3]   97.964% 	[class: 4]
 [       0       2       1       0    1170       0       3       1       0       7]   98.818% 	[class: 5]
 [       1       0       1       3       0    1032       5       0       6       0]   98.473% 	[class: 6]
 [       2       1       0       0       1       3    1197       0       4       0]   99.089% 	[class: 7]
 [       0       1       5       3       2       0       0    1260       1       7]   98.514% 	[class: 8]
 [       1       4       4       3       2       5       2       1    1101       4]   97.693% 	[class: 9]
 [       1       0       2       2       8       0       0       3       4    1173]]  98.324% 	[class: 0]
 + average row correct: 98.518697619438% 
 + average rowUcol correct (VOC measure): 97.085936665535% 
 + global correct: 98.533333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s739ms | Step: 0ms     

==> time to test 1 sample = 0.45062649250031ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     188       0       0       0       1       0       2       0]   98.429% 	[class: 3]
 [       0       0       2     221       0       1       0       0       2       0]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       1       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       1       0       1       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       1       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.118267297745% 
 + average rowUcol correct (VOC measure): 98.212229609489% 
 + global correct: 99.1%
0.99118267297745	
==> found new best model!	
==> increasing patience from 12 to 24	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 13 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.99377334117889ms	
ConfusionMatrix:
[[    1196       0       2       0       0       0       3       0       2       3]   99.171% 	[class: 1]
 [       0    1340       1       1       3       1       0       3       2       0]   99.186% 	[class: 2]
 [       1       1    1161       3       2       0       1       5       2       0]   98.724% 	[class: 3]
 [       1       0       4    1210       0       3       0       3       4       3]   98.534% 	[class: 4]
 [       0       2       2       0    1169       0       3       1       2       5]   98.733% 	[class: 5]
 [       0       0       0       3       0    1033       4       1       6       1]   98.569% 	[class: 6]
 [       2       1       1       0       1       3    1197       0       3       0]   99.089% 	[class: 7]
 [       0       4       4       1       1       0       0    1261       1       7]   98.593% 	[class: 8]
 [       1       2       2       2       2       4       3       1    1108       2]   98.314% 	[class: 9]
 [       1       1       0       2       4       1       0       3       0    1181]]  98.994% 	[class: 0]
 + average row correct: 98.790739178658% 
 + average rowUcol correct (VOC measure): 97.612517476082% 
 + global correct: 98.8%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s835ms | Step: 0ms     

==> time to test 1 sample = 0.44749248027802ms	
ConfusionMatrix:
[[     194       0       0       0       0       0       5       0       0       0]   97.487% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     187       0       0       0       1       2       1       0]   97.906% 	[class: 3]
 [       0       0       4     219       0       1       0       2       0       0]   96.903% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       1       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       0       1       1       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       1       3       0       0       1       0     199]]  97.549% 	[class: 0]
 + average row correct: 98.632432818413% 
 + average rowUcol correct (VOC measure): 97.229544520378% 
 + global correct: 98.6%
0.98632432818413	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 14 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.99211484193802ms	
ConfusionMatrix:
[[    1198       0       1       0       0       1       4       0       0       2]   99.337% 	[class: 1]
 [       0    1344       1       0       2       0       0       3       0       1]   99.482% 	[class: 2]
 [       2       2    1161       4       1       0       0       3       3       0]   98.724% 	[class: 3]
 [       1       0       5    1210       0       4       1       5       0       2]   98.534% 	[class: 4]
 [       0       1       2       0    1170       0       2       1       0       8]   98.818% 	[class: 5]
 [       0       1       0       3       0    1036       5       1       1       1]   98.855% 	[class: 6]
 [       3       0       1       0       3       7    1194       0       0       0]   98.841% 	[class: 7]
 [       1       2       5       3       1       0       0    1261       0       6]   98.593% 	[class: 8]
 [       3       2       3       2       1       1       0       1    1112       2]   98.669% 	[class: 9]
 [       3       0       1       2       7       3       0       5       3    1169]]  97.988% 	[class: 0]
 + average row correct: 98.784074187279% 
 + average rowUcol correct (VOC measure): 97.599385380745% 
 + global correct: 98.791666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s798ms | Step: 0ms     

==> time to test 1 sample = 0.43861496448517ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     220       1       0       0       0       0       0       1       0]   99.099% 	[class: 2]
 [       0       0     186       0       0       0       1       2       2       0]   97.382% 	[class: 3]
 [       0       0       4     220       0       1       0       0       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     176       0       0       0       2]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       1       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       1       1       1       0       1       0       0       0     201       1]   97.573% 	[class: 9]
 [       0       0       0       1       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.778772354126% 
 + average rowUcol correct (VOC measure): 97.55442738533% 
 + global correct: 98.75%
0.98778772354126	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 15 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.96065415938695ms	
ConfusionMatrix:
[[    1201       0       1       0       0       1       1       0       1       1]   99.585% 	[class: 1]
 [       0    1341       2       1       0       0       1       1       5       0]   99.260% 	[class: 2]
 [       4       6    1159       3       0       0       1       2       1       0]   98.554% 	[class: 3]
 [       1       0       2    1210       1       4       0       3       4       3]   98.534% 	[class: 4]
 [       0       0       1       0    1175       1       1       2       0       4]   99.240% 	[class: 5]
 [       0       0       0       7       1    1032       4       0       3       1]   98.473% 	[class: 6]
 [       3       1       1       0       0       3    1196       0       4       0]   99.007% 	[class: 7]
 [       0       0       5       3       2       1       0    1262       0       6]   98.671% 	[class: 8]
 [       4       1       2       1       0       7       1       1    1105       5]   98.048% 	[class: 9]
 [       2       1       0       1       5       3       1       5       4    1171]]  98.156% 	[class: 0]
 + average row correct: 98.752825856209% 
 + average rowUcol correct (VOC measure): 97.533213496208% 
 + global correct: 98.766666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s397ms | Step: 0ms     

==> time to test 1 sample = 0.42779803276062ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     182       0       1       0       1       3       4       0]   95.288% 	[class: 3]
 [       0       0       1     217       0       2       0       2       4       0]   96.018% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     175       3       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       0       2       0       1       3     197]]  96.569% 	[class: 0]
 + average row correct: 98.369340896606% 
 + average rowUcol correct (VOC measure): 96.753785014153% 
 + global correct: 98.35%
0.98369340896606	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 16 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94827483097712ms	
ConfusionMatrix:
[[    1196       1       1       0       1       0       4       0       2       1]   99.171% 	[class: 1]
 [       1    1340       1       2       1       0       0       3       2       1]   99.186% 	[class: 2]
 [       0       1    1168       1       1       1       0       3       1       0]   99.320% 	[class: 3]
 [       0       1       1    1214       0       7       0       1       2       2]   98.860% 	[class: 4]
 [       1       0       1       0    1172       1       1       1       1       6]   98.986% 	[class: 5]
 [       1       1       0       6       0    1032       2       0       6       0]   98.473% 	[class: 6]
 [       4       0       0       0       2       1    1200       0       1       0]   99.338% 	[class: 7]
 [       0       1       3       3       1       0       0    1262       2       7]   98.671% 	[class: 8]
 [       3       1       0       3       1       4       3       0    1108       4]   98.314% 	[class: 9]
 [       4       1       0       1       7       2       0       2       4    1172]]  98.240% 	[class: 0]
 + average row correct: 98.855845332146% 
 + average rowUcol correct (VOC measure): 97.733353376389% 
 + global correct: 98.866666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s303ms | Step: 0ms     

==> time to test 1 sample = 0.45418846607208ms	
ConfusionMatrix:
[[     197       0       0       0       0       1       1       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       1     187       0       1       0       0       2       0       0]   97.906% 	[class: 3]
 [       0       0       1     223       0       1       0       0       1       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       0       1       2       0       0     200       1]   97.087% 	[class: 9]
 [       0       0       0       1       0       2       0       1       0     200]]  98.039% 	[class: 0]
 + average row correct: 99.015935659409% 
 + average rowUcol correct (VOC measure): 98.003268837929% 
 + global correct: 99%
0.99015935659409	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 17 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.99030774831772ms	
ConfusionMatrix:
[[    1201       0       0       1       0       0       3       0       1       0]   99.585% 	[class: 1]
 [       1    1343       2       0       1       0       0       2       0       2]   99.408% 	[class: 2]
 [       0       1    1165       6       1       0       0       2       1       0]   99.065% 	[class: 3]
 [       0       0       1    1218       0       6       0       2       1       0]   99.186% 	[class: 4]
 [       1       2       0       0    1175       0       1       0       0       5]   99.240% 	[class: 5]
 [       0       0       0       7       0    1035       1       0       3       2]   98.760% 	[class: 6]
 [       2       0       1       0       1       2    1202       0       0       0]   99.503% 	[class: 7]
 [       0       3       1       1       2       1       0    1266       2       3]   98.984% 	[class: 8]
 [       2       2       3       0       0       2       2       1    1113       2]   98.758% 	[class: 9]
 [       1       1       0       0       6       1       0       4       1    1179]]  98.826% 	[class: 0]
 + average row correct: 99.131408929825% 
 + average rowUcol correct (VOC measure): 98.283772468567% 
 + global correct: 99.141666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s760ms | Step: 0ms     

==> time to test 1 sample = 0.43104195594788ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     190       0       0       0       0       0       1       0]   99.476% 	[class: 3]
 [       0       0       4     221       0       1       0       0       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     183       0       0       0       0       2]   98.919% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       2       0       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       0       0       1       0       0       1       0       0     203       1]   98.544% 	[class: 9]
 [       0       0       0       1       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.072288870811% 
 + average rowUcol correct (VOC measure): 98.135699629784% 
 + global correct: 99.05%
0.99072288870811	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 18 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93295699357986ms	
ConfusionMatrix:
[[    1199       1       1       0       1       0       1       0       1       2]   99.420% 	[class: 1]
 [       0    1337       6       1       0       0       1       4       1       1]   98.964% 	[class: 2]
 [       1       2    1169       0       0       0       0       3       0       1]   99.405% 	[class: 3]
 [       1       0       4    1211       1       7       0       1       1       2]   98.616% 	[class: 4]
 [       0       0       0       0    1171       0       4       2       0       7]   98.902% 	[class: 5]
 [       0       0       0       4       0    1038       1       0       2       3]   99.046% 	[class: 6]
 [       1       0       0       1       2       1    1201       0       2       0]   99.421% 	[class: 7]
 [       1       4       4       4       1       0       0    1261       1       3]   98.593% 	[class: 8]
 [       0       0       1       1       1       3       1       0    1116       4]   99.024% 	[class: 9]
 [       1       1       1       3       4       1       0       3       3    1176]]  98.575% 	[class: 0]
 + average row correct: 98.996368646622% 
 + average rowUcol correct (VOC measure): 98.002514839172% 
 + global correct: 98.991666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s90ms | Step: 0ms      

==> time to test 1 sample = 0.43976998329163ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       1     181       0       1       0       1       6       1       0]   94.764% 	[class: 3]
 [       0       0       2     218       0       2       0       2       1       1]   96.460% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       0       1       0       0       0       0       0     203       1]   98.544% 	[class: 9]
 [       0       0       0       0       0       1       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.873752951622% 
 + average rowUcol correct (VOC measure): 97.741160392761% 
 + global correct: 98.85%
0.98873752951622	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 19 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.96107067664464ms	
ConfusionMatrix:
[[    1200       0       2       0       0       0       3       1       0       0]   99.502% 	[class: 1]
 [       1    1342       2       0       3       0       0       2       1       0]   99.334% 	[class: 2]
 [       3       3    1157       2       2       0       1       3       4       1]   98.384% 	[class: 3]
 [       0       0       2    1218       0       4       0       2       1       1]   99.186% 	[class: 4]
 [       0       2       0       0    1168       1       1       0       1      11]   98.649% 	[class: 5]
 [       1       1       0       6       0    1032       2       0       6       0]   98.473% 	[class: 6]
 [       1       0       1       0       1       2    1201       0       2       0]   99.421% 	[class: 7]
 [       1       1       5       2       1       1       0    1263       2       3]   98.749% 	[class: 8]
 [       2       2       5       1       0       5       1       2    1102       7]   97.782% 	[class: 9]
 [       2       0       0       1       9       2       0       3       3    1173]]  98.324% 	[class: 0]
 + average row correct: 98.780310153961% 
 + average rowUcol correct (VOC measure): 97.596726417542% 
 + global correct: 98.8%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s431ms | Step: 0ms     

==> time to test 1 sample = 0.44241452217102ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     218       3       0       0       1       0       0       0       0]   98.198% 	[class: 2]
 [       0       0     187       0       0       0       0       2       2       0]   97.906% 	[class: 3]
 [       0       0       3     222       0       1       0       0       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       2       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.028772711754% 
 + average rowUcol correct (VOC measure): 98.042988777161% 
 + global correct: 99%
0.99028772711754	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 20 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.99235041936239ms	
ConfusionMatrix:
[[    1197       1       2       0       0       1       3       0       2       0]   99.254% 	[class: 1]
 [       0    1345       1       0       0       0       2       2       1       0]   99.556% 	[class: 2]
 [       1       2    1164       2       1       0       1       3       2       0]   98.980% 	[class: 3]
 [       1       0       2    1215       0       6       0       1       1       2]   98.941% 	[class: 4]
 [       0       1       1       0    1172       0       1       2       1       6]   98.986% 	[class: 5]
 [       0       0       1       5       2    1035       2       0       2       1]   98.760% 	[class: 6]
 [       1       1       0       1       0       1    1201       0       3       0]   99.421% 	[class: 7]
 [       1       2       4       2       2       1       0    1262       1       4]   98.671% 	[class: 8]
 [       2       2       0       1       1       4       5       2    1106       4]   98.137% 	[class: 9]
 [       2       0       0       1       8       0       1       2       1    1178]]  98.743% 	[class: 0]
 + average row correct: 98.944728374481% 
 + average rowUcol correct (VOC measure): 97.916485071182% 
 + global correct: 98.958333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s794ms | Step: 0ms     

==> time to test 1 sample = 0.4357305765152ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     220       2       0       0       0       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     188       0       0       0       0       3       0       0]   98.429% 	[class: 3]
 [       0       0       2     220       0       3       0       0       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       3       1       1       0       1       1       0       0     199       0]   96.602% 	[class: 9]
 [       0       0       0       1       0       1       0       2       0     200]]  98.039% 	[class: 0]
 + average row correct: 98.897416591644% 
 + average rowUcol correct (VOC measure): 97.747908830643% 
 + global correct: 98.85%
0.98897416591644	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 21 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94486566384633ms	
ConfusionMatrix:
[[    1201       0       1       0       0       0       1       1       0       2]   99.585% 	[class: 1]
 [       0    1341       1       1       1       2       1       3       1       0]   99.260% 	[class: 2]
 [       2       2    1159       3       0       1       0       4       4       1]   98.554% 	[class: 3]
 [       0       2       0    1215       0       8       1       1       0       1]   98.941% 	[class: 4]
 [       0       2       2       0    1175       0       0       2       1       2]   99.240% 	[class: 5]
 [       1       2       2       4       0    1035       2       1       0       1]   98.760% 	[class: 6]
 [       1       2       0       0       0       2    1201       0       2       0]   99.421% 	[class: 7]
 [       0       1       4       2       1       0       0    1265       1       5]   98.905% 	[class: 8]
 [       1       1       2       3       1       1       2       1    1114       1]   98.846% 	[class: 9]
 [       2       1       0       3       3       1       0       2       2    1179]]  98.826% 	[class: 0]
 + average row correct: 99.033931493759% 
 + average rowUcol correct (VOC measure): 98.091652989388% 
 + global correct: 99.041666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s229ms | Step: 0ms     

==> time to test 1 sample = 0.43814551830292ms	
ConfusionMatrix:
[[     194       0       0       0       0       0       5       0       0       0]   97.487% 	[class: 1]
 [       0     217       5       0       0       0       0       0       0       0]   97.748% 	[class: 2]
 [       0       0     187       0       0       0       1       2       1       0]   97.906% 	[class: 3]
 [       0       0       3     221       0       1       0       0       1       0]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       0       0       1       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       1       0       0       1       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       0       0       1       2     200]]  98.039% 	[class: 0]
 + average row correct: 98.694490790367% 
 + average rowUcol correct (VOC measure): 97.359506487846% 
 + global correct: 98.65%
0.98694490790367	
==> patience: 24	
==> doing epoch on training data:	
==> online epoch # 22 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94041192531586ms	
ConfusionMatrix:
[[    1196       0       3       0       1       0       1       0       3       2]   99.171% 	[class: 1]
 [       0    1344       3       1       0       0       1       1       1       0]   99.482% 	[class: 2]
 [       1       3    1164       2       0       0       1       3       2       0]   98.980% 	[class: 3]
 [       0       0       3    1212       0       7       0       1       2       3]   98.697% 	[class: 4]
 [       0       2       1       0    1172       0       0       0       3       6]   98.986% 	[class: 5]
 [       1       0       0       2       0    1038       4       0       3       0]   99.046% 	[class: 6]
 [       1       2       0       0       1       2    1200       0       2       0]   99.338% 	[class: 7]
 [       1       0       5       1       2       0       0    1267       1       2]   99.062% 	[class: 8]
 [       2       0       3       1       1       5       1       0    1110       4]   98.492% 	[class: 9]
 [       1       1       0       0       5       2       0       4       3    1177]]  98.659% 	[class: 0]
 + average row correct: 98.99115562439% 
 + average rowUcol correct (VOC measure): 97.993438839912% 
 + global correct: 99%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s180ms | Step: 0ms     

==> time to test 1 sample = 0.43537449836731ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     187       0       0       0       1       2       1       0]   97.906% 	[class: 3]
 [       0       0       1     223       0       0       0       0       2       0]   98.673% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       1       0]   99.510% 	[class: 8]
 [       0       0       1       1       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 99.307427406311% 
 + average rowUcol correct (VOC measure): 98.639218211174% 
 + global correct: 99.3%
0.99307427406311	
==> found new best model!	
==> increasing patience from 24 to 44	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 23 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94331234693527ms	
ConfusionMatrix:
[[    1202       1       0       0       0       1       1       0       0       1]   99.668% 	[class: 1]
 [       0    1342       6       0       1       1       0       0       1       0]   99.334% 	[class: 2]
 [       3       2    1159       5       1       0       0       3       2       1]   98.554% 	[class: 3]
 [       1       1       3    1217       0       2       1       0       2       1]   99.104% 	[class: 4]
 [       0       0       1       0    1174       0       1       0       1       7]   99.155% 	[class: 5]
 [       0       1       0       5       0    1036       0       0       4       2]   98.855% 	[class: 6]
 [       1       0       0       0       1       1    1204       0       1       0]   99.669% 	[class: 7]
 [       0       1       6       0       1       0       0    1265       0       6]   98.905% 	[class: 8]
 [       1       3       1       1       0       2       1       1    1113       4]   98.758% 	[class: 9]
 [       2       0       1       1       6       2       0       2       2    1177]]  98.659% 	[class: 0]
 + average row correct: 99.066204428673% 
 + average rowUcol correct (VOC measure): 98.152757287025% 
 + global correct: 99.075%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s205ms | Step: 0ms     

==> time to test 1 sample = 0.43546748161316ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     183       0       0       0       1       5       2       0]   95.812% 	[class: 3]
 [       0       0       1     222       0       1       0       1       1       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     203       1       0]   99.510% 	[class: 8]
 [       1       0       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       0       2       0       0       2       2     198]]  97.059% 	[class: 0]
 + average row correct: 98.708876371384% 
 + average rowUcol correct (VOC measure): 97.425017356873% 
 + global correct: 98.7%
0.98708876371384	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 24 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.95437190930049ms	
ConfusionMatrix:
[[    1203       0       0       0       0       1       1       0       0       1]   99.751% 	[class: 1]
 [       0    1346       1       0       1       0       0       2       1       0]   99.630% 	[class: 2]
 [       0       3    1164       1       1       1       0       4       2       0]   98.980% 	[class: 3]
 [       0       0       2    1221       0       2       0       2       0       1]   99.430% 	[class: 4]
 [       0       0       2       0    1175       1       0       1       0       5]   99.240% 	[class: 5]
 [       2       0       1       2       0    1036       2       0       3       2]   98.855% 	[class: 6]
 [       3       1       0       0       0       3    1199       0       2       0]   99.255% 	[class: 7]
 [       0       0       2       3       1       1       0    1269       0       3]   99.218% 	[class: 8]
 [       0       1       1       0       0       1       4       0    1120       0]   99.379% 	[class: 9]
 [       0       0       0       2       5       2       0       4       1    1179]]  98.826% 	[class: 0]
 + average row correct: 99.256400465965% 
 + average rowUcol correct (VOC measure): 98.526266813278% 
 + global correct: 99.266666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s343ms | Step: 0ms     

==> time to test 1 sample = 0.43880498409271ms	
ConfusionMatrix:
[[     197       0       0       0       0       1       1       0       0       0]   98.995% 	[class: 1]
 [       0     220       0       0       0       1       0       0       1       0]   99.099% 	[class: 2]
 [       0       0     186       0       1       0       1       2       1       0]   97.382% 	[class: 3]
 [       0       0       1     222       0       1       0       0       2       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       2     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       1       0       0       0       0     202       1       0]   99.020% 	[class: 8]
 [       0       0       1       0       1       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       0       0       0       0       1       1     202]]  99.020% 	[class: 0]
 + average row correct: 98.969361782074% 
 + average rowUcol correct (VOC measure): 97.90902197361% 
 + global correct: 98.95%
0.98969361782074	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 25 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.94364150365194ms	
ConfusionMatrix:
[[    1202       0       0       0       0       1       1       1       1       0]   99.668% 	[class: 1]
 [       0    1342       2       1       1       1       0       2       1       1]   99.334% 	[class: 2]
 [       0       0    1166       2       2       1       1       3       0       1]   99.150% 	[class: 3]
 [       0       1       1    1217       0       4       0       2       0       3]   99.104% 	[class: 4]
 [       0       1       0       0    1178       0       1       1       1       2]   99.493% 	[class: 5]
 [       0       0       0       5       0    1040       1       0       2       0]   99.237% 	[class: 6]
 [       2       0       0       0       1       1    1203       0       1       0]   99.586% 	[class: 7]
 [       0       3       2       1       0       0       0    1269       0       4]   99.218% 	[class: 8]
 [       2       2       1       1       1       2       0       0    1114       4]   98.846% 	[class: 9]
 [       0       0       0       1       2       1       0       2       3    1184]]  99.246% 	[class: 0]
 + average row correct: 99.288226366043% 
 + average rowUcol correct (VOC measure): 98.585184812546% 
 + global correct: 99.291666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s222ms | Step: 0ms     

==> time to test 1 sample = 0.44257891178131ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     186       0       0       0       1       3       1       0]   97.382% 	[class: 3]
 [       0       0       3     220       0       0       0       2       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       0       1       0       0       1     201]]  98.529% 	[class: 0]
 + average row correct: 99.072322249413% 
 + average rowUcol correct (VOC measure): 98.125994801521% 
 + global correct: 99.05%
0.99072322249413	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 26 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.94989542166392ms	
ConfusionMatrix:
[[    1202       0       1       0       0       0       3       0       0       0]   99.668% 	[class: 1]
 [       0    1339       4       2       1       0       0       3       2       0]   99.112% 	[class: 2]
 [       1       2    1163       5       0       0       0       3       2       0]   98.895% 	[class: 3]
 [       0       0       7    1217       0       1       0       1       1       1]   99.104% 	[class: 4]
 [       0       2       0       0    1179       0       1       0       0       2]   99.578% 	[class: 5]
 [       1       0       0       2       0    1040       3       0       1       1]   99.237% 	[class: 6]
 [       1       0       0       0       1       2    1200       0       4       0]   99.338% 	[class: 7]
 [       0       2       0       1       2       1       0    1268       0       5]   99.140% 	[class: 8]
 [       1       3       0       0       0       2       1       1    1119       0]   99.290% 	[class: 9]
 [       1       1       0       1       3       0       0       4       1    1182]]  99.078% 	[class: 0]
 + average row correct: 99.243903756142% 
 + average rowUcol correct (VOC measure): 98.499367237091% 
 + global correct: 99.241666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s303ms | Step: 0ms     

==> time to test 1 sample = 0.4456170797348ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       1     220       0       0       0       0       0       0       1       0]   99.099% 	[class: 2]
 [       0       0     184       2       1       0       1       2       1       0]   96.335% 	[class: 3]
 [       0       0       2     223       0       0       0       0       1       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       1       0       0       0     203       1]   98.544% 	[class: 9]
 [       0       0       0       1       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.112949967384% 
 + average rowUcol correct (VOC measure): 98.233742713928% 
 + global correct: 99.1%
0.99112949967384	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 27 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.96017132202784ms	
ConfusionMatrix:
[[    1201       1       0       1       0       0       1       0       0       2]   99.585% 	[class: 1]
 [       0    1342       3       0       0       1       1       1       2       1]   99.334% 	[class: 2]
 [       0       2    1167       1       0       0       2       1       3       0]   99.235% 	[class: 3]
 [       0       0       3    1217       0       1       0       3       2       2]   99.104% 	[class: 4]
 [       0       0       1       0    1179       0       0       1       0       3]   99.578% 	[class: 5]
 [       0       0       0       2       0    1038       5       0       2       1]   99.046% 	[class: 6]
 [       1       2       1       0       2       0    1197       0       5       0]   99.089% 	[class: 7]
 [       0       1       1       2       1       0       0    1269       0       5]   99.218% 	[class: 8]
 [       0       1       1       2       0       3       2       0    1117       1]   99.113% 	[class: 9]
 [       2       0       0       3       5       1       0       5       2    1175]]  98.491% 	[class: 0]
 + average row correct: 99.179309606552% 
 + average rowUcol correct (VOC measure): 98.373464345932% 
 + global correct: 99.183333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s458ms | Step: 0ms     

==> time to test 1 sample = 0.46141397953033ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     188       0       0       0       1       1       1       0]   98.429% 	[class: 3]
 [       0       0       2     221       0       1       0       0       1       1]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       1       1       0       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       0       0       1       0       1       1       0       0     203       0]   98.544% 	[class: 9]
 [       0       0       0       0       0       0       0       0       0     204]]  100.000% 	[class: 0]
 + average row correct: 99.168518185616% 
 + average rowUcol correct (VOC measure): 98.313834667206% 
 + global correct: 99.15%
0.99168518185616	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 28 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.9820955991745ms	
ConfusionMatrix:
[[    1204       0       0       1       0       0       1       0       0       0]   99.834% 	[class: 1]
 [       1    1343       1       1       1       1       0       0       3       0]   99.408% 	[class: 2]
 [       1       0    1164       4       2       0       0       4       1       0]   98.980% 	[class: 3]
 [       0       2       3    1214       0       3       0       2       2       2]   98.860% 	[class: 4]
 [       0       2       2       0    1177       0       0       0       0       3]   99.409% 	[class: 5]
 [       0       0       0       2       0    1042       1       0       2       1]   99.427% 	[class: 6]
 [       2       2       0       0       0       1    1202       0       1       0]   99.503% 	[class: 7]
 [       0       1       4       2       0       0       0    1269       0       3]   99.218% 	[class: 8]
 [       1       1       3       1       0       5       1       0    1113       2]   98.758% 	[class: 9]
 [       1       0       0       2       5       0       0       0       0    1185]]  99.329% 	[class: 0]
 + average row correct: 99.272643327713% 
 + average rowUcol correct (VOC measure): 98.552259802818% 
 + global correct: 99.275%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s679ms | Step: 0ms     

==> time to test 1 sample = 0.43928802013397ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     186       0       0       0       1       3       1       0]   97.382% 	[class: 3]
 [       0       0       3     221       0       1       0       1       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     183       0       0       1       0       1]   98.919% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       0       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       0       0       0       0       2       1     201]]  98.529% 	[class: 0]
 + average row correct: 99.108546972275% 
 + average rowUcol correct (VOC measure): 98.231357932091% 
 + global correct: 99.1%
0.99108546972275	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 29 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.94005358219147ms	
ConfusionMatrix:
[[    1202       0       0       0       1       1       2       0       0       0]   99.668% 	[class: 1]
 [       0    1343       3       1       1       0       0       1       1       1]   99.408% 	[class: 2]
 [       1       3    1163       1       0       0       1       3       3       1]   98.895% 	[class: 3]
 [       1       0       0    1218       0       2       0       3       2       2]   99.186% 	[class: 4]
 [       0       1       0       0    1175       0       1       0       0       7]   99.240% 	[class: 5]
 [       0       0       0       3       1    1038       3       1       1       1]   99.046% 	[class: 6]
 [       3       0       0       0       1       1    1202       0       1       0]   99.503% 	[class: 7]
 [       0       2       1       2       0       0       0    1269       0       5]   99.218% 	[class: 8]
 [       1       1       2       1       0       2       1       1    1116       2]   99.024% 	[class: 9]
 [       1       0       0       1       4       4       0       8       3    1172]]  98.240% 	[class: 0]
 + average row correct: 99.142720103264% 
 + average rowUcol correct (VOC measure): 98.306044340134% 
 + global correct: 99.15%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s174ms | Step: 0ms     

==> time to test 1 sample = 0.44059097766876ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     189       0       0       0       1       0       1       0]   98.953% 	[class: 3]
 [       0       0       2     222       0       1       0       0       1       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       3       0       0       0       0     201       0       0]   98.529% 	[class: 8]
 [       0       1       1       1       0       0       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       1       0       0       0       1       0     201]]  98.529% 	[class: 0]
 + average row correct: 99.123991131783% 
 + average rowUcol correct (VOC measure): 98.229465484619% 
 + global correct: 99.1%
0.99123991131783	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 30 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.94072874387105ms	
ConfusionMatrix:
[[    1201       0       2       0       0       0       0       0       1       2]   99.585% 	[class: 1]
 [       0    1339       2       3       1       1       0       3       1       1]   99.112% 	[class: 2]
 [       3       3    1160       4       0       0       0       2       3       1]   98.639% 	[class: 3]
 [       0       0       5    1210       0       6       0       2       3       2]   98.534% 	[class: 4]
 [       2       0       0       0    1175       0       1       1       1       4]   99.240% 	[class: 5]
 [       0       0       1       4       0    1034       6       0       1       2]   98.664% 	[class: 6]
 [       1       0       1       0       1       4    1200       0       1       0]   99.338% 	[class: 7]
 [       0       4       3       3       0       0       0    1269       0       0]   99.218% 	[class: 8]
 [       0       1       4       2       0       2       0       0    1118       0]   99.201% 	[class: 9]
 [       1       2       0       1       3       0       0       1       2    1183]]  99.162% 	[class: 0]
 + average row correct: 99.069391489029% 
 + average rowUcol correct (VOC measure): 98.154793977737% 
 + global correct: 99.075%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s154ms | Step: 0ms     

==> time to test 1 sample = 0.42714095115662ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     188       0       0       0       1       1       1       0]   98.429% 	[class: 3]
 [       0       0       4     221       0       1       0       0       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       1       1       0       1       0       0       0     201       1]   97.573% 	[class: 9]
 [       1       0       1       0       1       1       0       2       0     198]]  97.059% 	[class: 0]
 + average row correct: 98.826332092285% 
 + average rowUcol correct (VOC measure): 97.627583742142% 
 + global correct: 98.8%
0.98826332092285	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 31 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.95897259314855ms	
ConfusionMatrix:
[[    1199       1       1       0       0       0       2       0       3       0]   99.420% 	[class: 1]
 [       1    1345       4       0       0       0       0       1       0       0]   99.556% 	[class: 2]
 [       2       2    1165       2       1       0       0       3       1       0]   99.065% 	[class: 3]
 [       0       0       1    1220       0       4       0       1       1       1]   99.349% 	[class: 4]
 [       0       2       0       0    1174       0       0       2       0       6]   99.155% 	[class: 5]
 [       0       0       0       2       0    1044       1       0       1       0]   99.618% 	[class: 6]
 [       3       0       0       0       0       4    1200       0       1       0]   99.338% 	[class: 7]
 [       1       1       3       0       2       0       0    1269       0       3]   99.218% 	[class: 8]
 [       2       1       3       0       1       1       4       0    1112       3]   98.669% 	[class: 9]
 [       1       0       0       2       5       1       0       1       3    1180]]  98.910% 	[class: 0]
 + average row correct: 99.229757785797% 
 + average rowUcol correct (VOC measure): 98.467043638229% 
 + global correct: 99.233333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s450ms | Step: 0ms     

==> time to test 1 sample = 0.46506142616272ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     219       2       0       0       0       0       1       0       0]   98.649% 	[class: 2]
 [       0       0     186       0       0       0       1       3       1       0]   97.382% 	[class: 3]
 [       0       0       3     221       0       0       0       0       2       0]   97.788% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     176       0       0       0       1]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       0       0       0       1       2     200]]  98.039% 	[class: 0]
 + average row correct: 98.821288347244% 
 + average rowUcol correct (VOC measure): 97.662591934204% 
 + global correct: 98.8%
0.98821288347244	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 32 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 16ms | Step: 1ms         
==> time to learn 1 sample = 1.0349409182866ms	
ConfusionMatrix:
[[    1200       0       1       1       0       0       3       0       1       0]   99.502% 	[class: 1]
 [       0    1345       1       1       0       1       0       3       0       0]   99.556% 	[class: 2]
 [       2       2    1164       1       1       0       0       2       3       1]   98.980% 	[class: 3]
 [       2       0       2    1222       0       1       0       1       0       0]   99.511% 	[class: 4]
 [       0       0       2       0    1172       0       1       0       0       9]   98.986% 	[class: 5]
 [       0       0       0       1       0    1040       2       1       2       2]   99.237% 	[class: 6]
 [       3       0       1       0       1       1    1202       0       0       0]   99.503% 	[class: 7]
 [       0       2       3       1       0       0       0    1267       0       6]   99.062% 	[class: 8]
 [       2       0       2       1       1       2       0       2    1115       2]   98.935% 	[class: 9]
 [       0       0       0       0       5       1       0       5       4    1178]]  98.743% 	[class: 0]
 + average row correct: 99.201546907425% 
 + average rowUcol correct (VOC measure): 98.420903086662% 
 + global correct: 99.208333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 13s305ms | Step: 0ms     

==> time to test 1 sample = 0.43765449523926ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     218       3       0       0       0       0       0       1       0]   98.198% 	[class: 2]
 [       0       0     189       0       0       0       0       2       0       0]   98.953% 	[class: 3]
 [       0       0       3     222       0       1       0       0       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       0       1       1       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       1       1       1       0       1       1     198]]  97.059% 	[class: 0]
 + average row correct: 98.945042490959% 
 + average rowUcol correct (VOC measure): 97.835046052933% 
 + global correct: 98.9%
0.98945042490959	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 33 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.98410558700562ms	
ConfusionMatrix:
[[    1200       1       2       0       0       1       0       0       2       0]   99.502% 	[class: 1]
 [       0    1348       1       0       0       0       0       1       0       1]   99.778% 	[class: 2]
 [       1       0    1168       1       1       0       0       1       3       1]   99.320% 	[class: 3]
 [       1       0       3    1217       0       3       0       0       1       3]   99.104% 	[class: 4]
 [       0       1       1       0    1177       0       3       0       1       1]   99.409% 	[class: 5]
 [       1       0       0       3       0    1039       2       0       1       2]   99.141% 	[class: 6]
 [       0       1       0       0       2       3    1200       0       2       0]   99.338% 	[class: 7]
 [       0       0       1       0       0       0       0    1274       3       1]   99.609% 	[class: 8]
 [       1       0       1       3       1       3       1       0    1115       2]   98.935% 	[class: 9]
 [       1       0       0       1       2       2       0       3       0    1184]]  99.246% 	[class: 0]
 + average row correct: 99.338204264641% 
 + average rowUcol correct (VOC measure): 98.681700229645% 
 + global correct: 99.35%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s727ms | Step: 0ms     

==> time to test 1 sample = 0.45240998268127ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     186       0       1       0       1       3       0       0]   97.382% 	[class: 3]
 [       0       0       4     220       0       0       0       1       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       1       1       0       0       0       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       0       0       0       0       0       1     202]]  99.020% 	[class: 0]
 + average row correct: 99.124757051468% 
 + average rowUcol correct (VOC measure): 98.229424357414% 
 + global correct: 99.1%
0.99124757051468	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 34 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.98201966285706ms	
ConfusionMatrix:
[[    1200       0       0       1       0       1       3       1       0       0]   99.502% 	[class: 1]
 [       0    1342       5       0       2       0       0       1       1       0]   99.334% 	[class: 2]
 [       0       1    1172       0       1       0       0       2       0       0]   99.660% 	[class: 3]
 [       1       0       0    1222       0       0       0       3       1       1]   99.511% 	[class: 4]
 [       0       2       1       0    1171       1       2       1       1       5]   98.902% 	[class: 5]
 [       1       0       0       3       0    1041       1       0       1       1]   99.332% 	[class: 6]
 [       5       0       0       0       0       4    1199       0       0       0]   99.255% 	[class: 7]
 [       1       4       1       2       1       1       0    1266       1       2]   98.984% 	[class: 8]
 [       0       0       0       1       1       1       2       1    1117       4]   99.113% 	[class: 9]
 [       2       1       0       1       7       2       0       2       2    1176]]  98.575% 	[class: 0]
 + average row correct: 99.216792583466% 
 + average rowUcol correct (VOC measure): 98.442848920822% 
 + global correct: 99.216666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s668ms | Step: 0ms     

==> time to test 1 sample = 0.43202197551727ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     186       0       1       0       1       2       1       0]   97.382% 	[class: 3]
 [       0       0       2     222       0       2       0       0       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       0       1       1       0       1       1       0       0     202       0]   98.058% 	[class: 9]
 [       0       0       0       0       1       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.066669344902% 
 + average rowUcol correct (VOC measure): 98.096796274185% 
 + global correct: 99.05%
0.99066669344902	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 35 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.98726749420166ms	
ConfusionMatrix:
[[    1203       0       0       0       1       0       1       0       1       0]   99.751% 	[class: 1]
 [       0    1344       4       0       0       0       0       2       1       0]   99.482% 	[class: 2]
 [       0       4    1167       2       0       0       0       2       0       1]   99.235% 	[class: 3]
 [       0       1       1    1218       0       4       0       1       3       0]   99.186% 	[class: 4]
 [       0       0       1       0    1178       0       0       1       0       4]   99.493% 	[class: 5]
 [       1       0       0       2       1    1040       2       0       2       0]   99.237% 	[class: 6]
 [       2       1       0       0       1       0    1204       0       0       0]   99.669% 	[class: 7]
 [       0       0       3       0       1       0       0    1270       1       4]   99.296% 	[class: 8]
 [       0       0       1       1       0       5       1       2    1115       2]   98.935% 	[class: 9]
 [       1       0       0       2       1       2       0       2       1    1184]]  99.246% 	[class: 0]
 + average row correct: 99.352938532829% 
 + average rowUcol correct (VOC measure): 98.712186217308% 
 + global correct: 99.358333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s729ms | Step: 0ms     

==> time to test 1 sample = 0.43492102622986ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     188       1       0       0       1       0       1       0]   98.429% 	[class: 3]
 [       0       0       2     223       0       1       0       0       0       0]   98.673% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       0       1       1       0       0       0       0       0     203       1]   98.544% 	[class: 9]
 [       0       0       0       1       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 99.112698435783% 
 + average rowUcol correct (VOC measure): 98.232057094574% 
 + global correct: 99.1%
0.99112698435783	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 36 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 16ms | Step: 1ms         
==> time to learn 1 sample = 1.0360680818558ms	
ConfusionMatrix:
[[    1201       1       1       1       0       0       1       0       1       0]   99.585% 	[class: 1]
 [       1    1349       0       0       0       0       0       1       0       0]   99.852% 	[class: 2]
 [       0       1    1168       1       0       0       0       2       3       1]   99.320% 	[class: 3]
 [       0       1       2    1220       0       2       0       1       0       2]   99.349% 	[class: 4]
 [       0       0       0       0    1179       0       1       2       0       2]   99.578% 	[class: 5]
 [       0       0       0       1       0    1044       2       0       0       1]   99.618% 	[class: 6]
 [       3       0       0       1       1       0    1201       0       2       0]   99.421% 	[class: 7]
 [       0       2       1       2       4       0       0    1267       0       3]   99.062% 	[class: 8]
 [       1       0       1       1       0       2       1       0    1120       1]   99.379% 	[class: 9]
 [       0       1       0       4       4       1       0       4       0    1179]]  98.826% 	[class: 0]
 + average row correct: 99.398931860924% 
 + average rowUcol correct (VOC measure): 98.808378577232% 
 + global correct: 99.4%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 13s342ms | Step: 0ms     

==> time to test 1 sample = 0.44876348972321ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       1     220       0       0       1       0       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     184       0       1       0       1       4       1       0]   96.335% 	[class: 3]
 [       1       0       4     220       0       1       0       0       0       0]   97.345% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     177       0       0       1       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       1       1       0       0       0       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       1       0       0       0       0       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.869972229004% 
 + average rowUcol correct (VOC measure): 97.734157443047% 
 + global correct: 98.85%
0.98869972229004	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 37 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.98652090628942ms	
ConfusionMatrix:
[[    1204       0       1       0       0       0       1       0       0       0]   99.834% 	[class: 1]
 [       1    1344       3       0       0       0       1       1       1       0]   99.482% 	[class: 2]
 [       2       2    1163       4       0       0       0       2       3       0]   98.895% 	[class: 3]
 [       1       0       2    1215       0       4       0       0       4       2]   98.941% 	[class: 4]
 [       0       0       2       0    1175       0       0       1       0       6]   99.240% 	[class: 5]
 [       0       0       0       4       0    1038       2       0       4       0]   99.046% 	[class: 6]
 [       0       0       0       0       0       4    1204       0       0       0]   99.669% 	[class: 7]
 [       0       0       2       3       2       0       0    1268       0       4]   99.140% 	[class: 8]
 [       0       2       1       3       0       2       1       0    1115       3]   98.935% 	[class: 9]
 [       1       0       0       0       4       3       0       4       2    1179]]  98.826% 	[class: 0]
 + average row correct: 99.200815558434% 
 + average rowUcol correct (VOC measure): 98.408843874931% 
 + global correct: 99.208333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s746ms | Step: 0ms     

==> time to test 1 sample = 0.44741296768188ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     185       0       1       0       1       2       2       0]   96.859% 	[class: 3]
 [       1       0       2     221       0       1       0       1       0       0]   97.788% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       5       1       1       0       1       1       0       0     197       0]   95.631% 	[class: 9]
 [       1       0       0       0       6       0       0       1       0     196]]  96.078% 	[class: 0]
 + average row correct: 98.475089669228% 
 + average rowUcol correct (VOC measure): 96.929332017899% 
 + global correct: 98.45%
0.98475089669228	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 38 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 1.0096160769463ms	
ConfusionMatrix:
[[    1201       0       0       1       0       0       3       0       1       0]   99.585% 	[class: 1]
 [       0    1347       1       0       0       0       1       1       1       0]   99.704% 	[class: 2]
 [       1       1    1170       0       1       0       0       2       0       1]   99.490% 	[class: 3]
 [       0       0       2    1222       0       2       0       1       0       1]   99.511% 	[class: 4]
 [       0       0       0       0    1178       0       1       2       0       3]   99.493% 	[class: 5]
 [       0       1       0       1       0    1044       0       0       2       0]   99.618% 	[class: 6]
 [       1       1       0       0       1       1    1204       0       0       0]   99.669% 	[class: 7]
 [       1       0       1       0       0       0       0    1276       0       1]   99.765% 	[class: 8]
 [       0       0       1       0       0       2       0       0    1123       1]   99.645% 	[class: 9]
 [       0       0       0       2       2       0       0       0       0    1189]]  99.665% 	[class: 0]
 + average row correct: 99.61462020874% 
 + average rowUcol correct (VOC measure): 99.231539964676% 
 + global correct: 99.616666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [============================================================== 2000/2000 ============>] Tot: 13s1ms | Step: 0ms       

==> time to test 1 sample = 0.43697798252106ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     185       0       1       0       0       3       2       0]   96.859% 	[class: 3]
 [       0       0       2     223       0       1       0       0       0       0]   98.673% 	[class: 4]
 [       0       0       0       0     184       0       0       1       0       0]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       1       1       1       0       1       0       0       0     202       0]   98.058% 	[class: 9]
 [       0       0       0       0       3       0       0       1       0     200]]  98.039% 	[class: 0]
 + average row correct: 99.003614187241% 
 + average rowUcol correct (VOC measure): 98.016982078552% 
 + global correct: 99%
0.99003614187241	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 39 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.93936783075333ms	
ConfusionMatrix:
[[    1200       0       1       1       0       1       2       0       1       0]   99.502% 	[class: 1]
 [       0    1349       0       0       0       0       0       0       1       1]   99.852% 	[class: 2]
 [       0       0    1165       4       1       0       0       3       2       1]   99.065% 	[class: 3]
 [       0       0       3    1217       0       1       0       3       3       1]   99.104% 	[class: 4]
 [       0       1       0       0    1177       0       0       0       1       5]   99.409% 	[class: 5]
 [       0       0       0       3       0    1041       2       0       1       1]   99.332% 	[class: 6]
 [       1       0       0       0       0       1    1202       0       4       0]   99.503% 	[class: 7]
 [       0       0       3       1       1       0       0    1272       1       1]   99.453% 	[class: 8]
 [       2       1       1       2       0       1       3       1    1114       2]   98.846% 	[class: 9]
 [       1       1       1       2       3       1       0       2       0    1182]]  99.078% 	[class: 0]
 + average row correct: 99.314459562302% 
 + average rowUcol correct (VOC measure): 98.644648194313% 
 + global correct: 99.325%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s140ms | Step: 0ms     

==> time to test 1 sample = 0.42867195606232ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     188       0       0       0       0       3       0       0]   98.429% 	[class: 3]
 [       0       0       2     223       0       1       0       0       0       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       2       0     176       0       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       1       1       4       1       2       0       0     195       2]   94.660% 	[class: 9]
 [       0       0       0       2       1       0       0       1       0     200]]  98.039% 	[class: 0]
 + average row correct: 98.764696717262% 
 + average rowUcol correct (VOC measure): 97.569793462753% 
 + global correct: 98.75%
0.98764696717262	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 40 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.95969450473785ms	
ConfusionMatrix:
[[    1203       0       0       0       0       1       1       0       0       1]   99.751% 	[class: 1]
 [       0    1347       1       0       1       0       0       1       0       1]   99.704% 	[class: 2]
 [       0       0    1170       1       0       0       0       4       1       0]   99.490% 	[class: 3]
 [       0       0       1    1221       0       3       0       2       1       0]   99.430% 	[class: 4]
 [       0       1       0       0    1178       0       0       2       1       2]   99.493% 	[class: 5]
 [       1       0       0       5       0    1040       1       0       1       0]   99.237% 	[class: 6]
 [       1       0       0       0       0       0    1206       0       1       0]   99.834% 	[class: 7]
 [       0       0       2       3       1       0       0    1271       0       2]   99.375% 	[class: 8]
 [       0       1       1       1       0       0       2       0    1120       2]   99.379% 	[class: 9]
 [       0       0       1       0       5       1       1       2       2    1181]]  98.994% 	[class: 0]
 + average row correct: 99.468677639961% 
 + average rowUcol correct (VOC measure): 98.94783437252% 
 + global correct: 99.475%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s401ms | Step: 0ms     

==> time to test 1 sample = 0.43670749664307ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     190       0       0       0       0       1       0       0]   99.476% 	[class: 3]
 [       0       0       3     221       0       1       0       0       0       1]   97.788% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       1       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       0       1       0       1       0       0       0     201       2]   97.573% 	[class: 9]
 [       0       0       0       1       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 99.07827436924% 
 + average rowUcol correct (VOC measure): 98.146677613258% 
 + global correct: 99.05%
0.9907827436924	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 41 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.95023858547211ms	
ConfusionMatrix:
[[    1201       0       0       0       0       2       2       0       1       0]   99.585% 	[class: 1]
 [       0    1347       0       1       1       0       0       1       1       0]   99.704% 	[class: 2]
 [       0       2    1168       2       0       0       0       0       3       1]   99.320% 	[class: 3]
 [       0       0       3    1219       0       3       0       1       1       1]   99.267% 	[class: 4]
 [       0       1       0       0    1178       0       0       0       0       5]   99.493% 	[class: 5]
 [       2       1       0       0       0    1043       1       0       0       1]   99.523% 	[class: 6]
 [       1       0       0       0       1       3    1203       0       0       0]   99.586% 	[class: 7]
 [       0       2       1       1       0       0       0    1272       0       3]   99.453% 	[class: 8]
 [       0       0       1       2       0       3       0       1    1119       1]   99.290% 	[class: 9]
 [       1       0       0       1       5       0       0       5       1    1180]]  98.910% 	[class: 0]
 + average row correct: 99.413155317307% 
 + average rowUcol correct (VOC measure): 98.829703330994% 
 + global correct: 99.416666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s281ms | Step: 0ms     

==> time to test 1 sample = 0.43341851234436ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       1       3       0       0]   97.382% 	[class: 3]
 [       1       0       2     222       0       1       0       0       0       0]   98.230% 	[class: 4]
 [       0       0       0       0     184       0       0       1       0       0]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       1       1       1       0       1       0       0       0     202       0]   98.058% 	[class: 9]
 [       1       0       0       0       1       0       0       1       1     200]]  98.039% 	[class: 0]
 + average row correct: 98.912622928619% 
 + average rowUcol correct (VOC measure): 97.819665670395% 
 + global correct: 98.9%
0.98912622928619	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 42 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.9471467534701ms	
ConfusionMatrix:
[[    1206       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0    1346       0       0       0       1       2       2       0       0]   99.630% 	[class: 2]
 [       0       1    1171       2       0       0       0       0       1       1]   99.575% 	[class: 3]
 [       0       0       2    1220       0       2       0       3       0       1]   99.349% 	[class: 4]
 [       0       2       1       0    1179       0       1       1       0       0]   99.578% 	[class: 5]
 [       0       0       0       1       0    1045       0       0       1       1]   99.714% 	[class: 6]
 [       0       1       0       0       1       0    1204       0       2       0]   99.669% 	[class: 7]
 [       0       1       2       1       0       0       0    1274       0       1]   99.609% 	[class: 8]
 [       0       0       1       1       0       0       0       0    1124       1]   99.734% 	[class: 9]
 [       0       0       0       1       2       0       0       3       2    1185]]  99.329% 	[class: 0]
 + average row correct: 99.618588089943% 
 + average rowUcol correct (VOC measure): 99.24080491066% 
 + global correct: 99.616666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s253ms | Step: 0ms     

==> time to test 1 sample = 0.4381240606308ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       1       2       1       0]   97.382% 	[class: 3]
 [       0       0       2     221       0       1       0       1       0       1]   97.788% 	[class: 4]
 [       0       0       0       0     184       0       0       1       0       0]   99.459% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       4       0       1       0       0       1       0       0     198       2]   96.117% 	[class: 9]
 [       0       0       0       1       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.771008253098% 
 + average rowUcol correct (VOC measure): 97.534075975418% 
 + global correct: 98.75%
0.98771008253098	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 43 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.95157867670059ms	
ConfusionMatrix:
[[    1201       0       0       0       0       0       2       0       1       2]   99.585% 	[class: 1]
 [       0    1348       1       0       0       0       0       2       0       0]   99.778% 	[class: 2]
 [       1       1    1167       1       1       0       0       1       4       0]   99.235% 	[class: 3]
 [       0       0       2    1220       1       1       0       2       1       1]   99.349% 	[class: 4]
 [       0       1       1       0    1176       1       1       0       0       4]   99.324% 	[class: 5]
 [       0       0       0       3       0    1042       2       0       1       0]   99.427% 	[class: 6]
 [       1       0       0       0       1       3    1203       0       0       0]   99.586% 	[class: 7]
 [       0       1       2       1       1       0       0    1272       1       1]   99.453% 	[class: 8]
 [       0       0       3       1       0       3       0       0    1117       3]   99.113% 	[class: 9]
 [       2       0       0       2       2       1       0       0       2    1184]]  99.246% 	[class: 0]
 + average row correct: 99.409546256065% 
 + average rowUcol correct (VOC measure): 98.822487592697% 
 + global correct: 99.416666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s373ms | Step: 0ms     

==> time to test 1 sample = 0.47105658054352ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       1       2       1       0]   97.382% 	[class: 3]
 [       1       0       4     218       0       1       0       1       1       0]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       2       0     174       0       0       1       1]   97.753% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       1       1       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       0       0       0       0       1     202]]  99.020% 	[class: 0]
 + average row correct: 98.815796375275% 
 + average rowUcol correct (VOC measure): 97.659468650818% 
 + global correct: 98.8%
0.98815796375275	
==> patience: 44	
==> doing epoch on training data:	
==> online epoch # 44 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 15ms | Step: 1ms         
==> time to learn 1 sample = 0.97084067265193ms	
ConfusionMatrix:
[[    1202       0       0       0       0       0       3       0       1       0]   99.668% 	[class: 1]
 [       0    1341       3       0       2       0       1       2       1       1]   99.260% 	[class: 2]
 [       1       2    1166       1       0       0       0       4       2       0]   99.150% 	[class: 3]
 [       0       1       2    1221       0       2       0       0       0       2]   99.430% 	[class: 4]
 [       0       1       0       0    1180       0       0       0       0       3]   99.662% 	[class: 5]
 [       0       0       0       1       0    1039       3       0       2       3]   99.141% 	[class: 6]
 [       2       1       1       0       1       0    1202       0       1       0]   99.503% 	[class: 7]
 [       0       2       4       0       1       0       0    1270       0       2]   99.296% 	[class: 8]
 [       0       1       2       1       3       1       1       1    1116       1]   99.024% 	[class: 9]
 [       0       0       1       0       2       1       0       2       3    1184]]  99.246% 	[class: 0]
 + average row correct: 99.33803319931% 
 + average rowUcol correct (VOC measure): 98.688579201698% 
 + global correct: 99.341666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s513ms | Step: 0ms     

==> time to test 1 sample = 0.42558002471924ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     182       0       1       0       1       2       5       0]   95.288% 	[class: 3]
 [       0       0       3     220       0       2       0       0       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       0       0       1       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       1       0       0       1       1       0       0       0       1     200]]  98.039% 	[class: 0]
 + average row correct: 98.908452987671% 
 + average rowUcol correct (VOC measure): 97.825763821602% 
 + global correct: 98.9%
0.98908452987671	
==> out of patience	
==> saving final model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	

