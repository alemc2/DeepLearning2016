      -- a typical modern convolution network (conv+relu+pool)
      model = nn.Sequential()

      -- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialDropout(0.6))
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 3 : standard 2-layer neural network
      model:add(nn.View(nstates[2]*filtsize*filtsize))
      model:add(nn.Dropout(0.6))
      model:add(nn.Linear(nstates[2]*filtsize*filtsize, nstates[3]))
      model:add(nn.ReLU())
      model:add(nn.Linear(nstates[3], noutputs))



==> processing options	
==> switching to CUDA	
==> executing all	
==> downloading dataset	
==> using reduced training data, with part of that as test/validation data	
==> loading dataset	
==> preprocessing data	
==> preprocessing data: normalize globally	
==> verify statistics	
training data mean: -1.5106435531228e-08	
training data standard deviation: 1.0000000156287	
test data mean: 0.012629995727272	
test data standard deviation: 1.0162751665024	
==> visualizing data	
==> define parameters	
==> construct model	
==> here is the model:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> output]
  (1): nn.SpatialConvolutionMM(1 -> 64, 5x5)
  (2): nn.ReLU
  (3): nn.SpatialMaxPooling(2,2,2,2)
  (4): nn.SpatialConvolutionMM(64 -> 64, 5x5)
  (5): nn.ReLU
  (6): nn.SpatialDropout(0.600000)
  (7): nn.SpatialMaxPooling(2,2,2,2)
  (8): nn.View
  (9): nn.Dropout(0.600000)
  (10): nn.Linear(1600 -> 128)
  (11): nn.ReLU
  (12): nn.Linear(128 -> 10)
}
==> define loss	
==> here is the loss function:	
nn.ClassNLLCriterion
==> defining some tools	
==> configuring optimizer	
==> defining training procedure	
==> defining test procedure	
==> training!	
==> doing epoch on training data:	
==> online epoch # 1 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 14ms | Step: 0ms         
==> time to learn 1 sample = 0.93632316589355ms	
ConfusionMatrix:
[[    1069       1      18      19       3      16      38      17      18       7]   88.640% 	[class: 1]
 [       2    1217      23      25       8       1      12      21      37       5]   90.081% 	[class: 2]
 [      24      29     945      54      21       5      18      34      32      14]   80.357% 	[class: 3]
 [      20      19      62     952      13      53       7      39      37      26]   77.524% 	[class: 4]
 [      10      19      20      11     930       9      35      33      19      98]   78.547% 	[class: 5]
 [      29      13      10      78      11     758      36      16      57      40]   72.328% 	[class: 6]
 [      46      29      18       7      21      20    1028       9      22       8]   85.099% 	[class: 7]
 [      17      16      39      17      24       2       0    1055      17      92]   82.486% 	[class: 8]
 [      27      50      35      45      23      55      31      25     790      46]   70.098% 	[class: 9]
 [      23      17      17      35      75      18       4      96      33     875]]  73.345% 	[class: 0]
 + average row correct: 79.850644469261% 
 + average rowUcol correct (VOC measure): 66.824483275414% 
 + global correct: 80.158333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s113ms | Step: 0ms     

==> time to test 1 sample = 0.43152797222137ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     218       0       0       1       0       1       0       2       0]   98.198% 	[class: 2]
 [       0       1     178       0       1       0       1       5       5       0]   93.194% 	[class: 3]
 [       1       0       9     208       0       1       1       1       0       5]   92.035% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     175       1       0       0       1]   98.315% 	[class: 6]
 [       1       0       0       0       1       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       2       0       0       0       0     198       0       4]   97.059% 	[class: 8]
 [       2       1       1       3       2       6       1       0     182       8]   88.350% 	[class: 9]
 [       1       0       0       1       9       3       0       1       1     188]]  92.157% 	[class: 0]
 + average row correct: 95.71829855442% 
 + average rowUcol correct (VOC measure): 91.665772199631% 
 + global correct: 95.6%
0.9571829855442	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 2 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93602132797241ms	
ConfusionMatrix:
[[    1134       0      16       5       0       9      17       2      17       6]   94.030% 	[class: 1]
 [       0    1275      22       6       8       2       8       6      22       2]   94.375% 	[class: 2]
 [       9      19    1049      36       6       0       4      25      22       6]   89.201% 	[class: 3]
 [       3       2      37    1093       1      38       1      23      18      12]   89.007% 	[class: 4]
 [       4      10       5       3    1095       2       9       2       8      46]   92.483% 	[class: 5]
 [      10       3       3      30       6     938      22       6      20      10]   89.504% 	[class: 6]
 [      12       8       3       1       9      18    1141       0      14       2]   94.454% 	[class: 7]
 [       1       5      30      18      12       4       0    1150       8      51]   89.914% 	[class: 8]
 [      15      19      18      18      11      32      20       8     949      37]   84.206% 	[class: 9]
 [       9       4       5      15      28      19       1      44      18    1050]]  88.013% 	[class: 0]
 + average row correct: 90.51854133606% 
 + average rowUcol correct (VOC measure): 82.812192440033% 
 + global correct: 90.616666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s128ms | Step: 0ms     

==> time to test 1 sample = 0.43944203853607ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     219       1       0       0       0       0       0       2       0]   98.649% 	[class: 2]
 [       0       0     179       1       0       0       1       5       5       0]   93.717% 	[class: 3]
 [       1       0      10     213       0       1       0       1       0       0]   94.248% 	[class: 4]
 [       0       0       0       0     183       0       0       1       0       1]   98.919% 	[class: 5]
 [       0       0       0       1       0     174       1       0       2       0]   97.753% 	[class: 6]
 [       2       0       0       0       0       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       2       0       0       0       0     201       1       0]   98.529% 	[class: 8]
 [       3       0       1       3       1       2       0       0     195       1]   94.660% 	[class: 9]
 [       1       0       0       1       7       4       0       9       1     181]]  88.725% 	[class: 0]
 + average row correct: 96.361694335938% 
 + average rowUcol correct (VOC measure): 92.919517159462% 
 + global correct: 96.3%
0.96361694335937	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 3 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93421916166941ms	
ConfusionMatrix:
[[    1161       1      12       1       0       9       9       3       8       2]   96.269% 	[class: 1]
 [       1    1299      13       4       7       1       4       6      14       2]   96.151% 	[class: 2]
 [       6      13    1087      18       8       1       7      17      17       2]   92.432% 	[class: 3]
 [       1       3      23    1126       1      24       2      17      21      10]   91.694% 	[class: 4]
 [       2       7       5       1    1106       2      11       6       7      37]   93.412% 	[class: 5]
 [       2       2       1      23       2     980      10       0      21       7]   93.511% 	[class: 6]
 [      13       6       3       0       9      12    1155       0      10       0]   95.613% 	[class: 7]
 [       1      10      20      14       7       2       0    1177       7      41]   92.025% 	[class: 8]
 [      12      17      21      15      11      10      17       4     998      22]   88.554% 	[class: 9]
 [      11       1       4       8      30      11       1      41      21    1065]]  89.271% 	[class: 0]
 + average row correct: 92.893108725548% 
 + average rowUcol correct (VOC measure): 86.811489462852% 
 + global correct: 92.95%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s82ms | Step: 0ms      

==> time to test 1 sample = 0.42779695987701ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     220       1       0       0       0       0       0       1       0]   99.099% 	[class: 2]
 [       0       0     179       0       1       0       1       6       4       0]   93.717% 	[class: 3]
 [       5       0       9     208       0       1       0       1       0       2]   92.035% 	[class: 4]
 [       0       0       0       0     183       0       0       0       0       2]   98.919% 	[class: 5]
 [       0       0       0       0       0     175       2       0       0       1]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     202       0       2]   99.020% 	[class: 8]
 [       3       0       1       1       1       2       0       0     196       2]   95.146% 	[class: 9]
 [       1       0       0       0       3       0       0       1       0     199]]  97.549% 	[class: 0]
 + average row correct: 97.229202389717% 
 + average rowUcol correct (VOC measure): 94.503444433212% 
 + global correct: 97.15%
0.97229202389717	
==> found new best model!	
==> increasing patience from 5 to 6	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 4 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93238508701324ms	
ConfusionMatrix:
[[    1162       1       8       3       3       5      13       0      11       0]   96.352% 	[class: 1]
 [       2    1293      15       5       8       4       7       6      10       1]   95.707% 	[class: 2]
 [       7      11    1075      23       3       1       4      19      25       8]   91.412% 	[class: 3]
 [       2       3      25    1129       1      29       1      22       8       8]   91.938% 	[class: 4]
 [       1       9       2       3    1127       3       5       8       3      23]   95.186% 	[class: 5]
 [       6       1       2      23       1     973      12       2      20       8]   92.844% 	[class: 6]
 [       8      10       0       0       9      10    1164       0       6       1]   96.358% 	[class: 7]
 [       2       5      18       8       7       1       0    1196       4      38]   93.511% 	[class: 8]
 [      12      12      15      11       5      21      10       3    1017      21]   90.240% 	[class: 9]
 [       9       4       3      15      20       8       2      22      12    1098]]  92.037% 	[class: 0]
 + average row correct: 93.55820775032% 
 + average rowUcol correct (VOC measure): 87.951037883759% 
 + global correct: 93.616666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s71ms | Step: 0ms      

==> time to test 1 sample = 0.43367946147919ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     219       1       0       0       0       0       0       2       0]   98.649% 	[class: 2]
 [       0       0     183       0       1       0       1       2       4       0]   95.812% 	[class: 3]
 [       1       0       8     215       0       1       0       1       0       0]   95.133% 	[class: 4]
 [       0       0       0       0     183       0       0       0       0       2]   98.919% 	[class: 5]
 [       0       0       0       0       0     177       1       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       3       0       0       0       0     200       0       1]   98.039% 	[class: 8]
 [       3       0       2       1       1       5       0       0     193       1]   93.689% 	[class: 9]
 [       1       0       0       1       1       2       0       1       1     197]]  96.569% 	[class: 0]
 + average row correct: 97.524217367172% 
 + average rowUcol correct (VOC measure): 95.06448328495% 
 + global correct: 97.45%
0.97524217367172	
==> found new best model!	
==> increasing patience from 6 to 8	
==> patience: 8	
==> doing epoch on training data:	
==> online epoch # 5 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93300290902456ms	
ConfusionMatrix:
[[    1174       1       6       2       0       2      11       0       5       5]   97.347% 	[class: 1]
 [       1    1302      10       4       7       3       5       7      11       1]   96.373% 	[class: 2]
 [       6      15    1088      21       6       2       3      17      14       4]   92.517% 	[class: 3]
 [       4       2      23    1140       1      22       0      15      11      10]   92.834% 	[class: 4]
 [       0       9       4       0    1125       0       5       4       5      32]   95.017% 	[class: 5]
 [       3       2       1      18       1     982       9       1      25       6]   93.702% 	[class: 6]
 [       8       4       2       0       3       8    1172       0      11       0]   97.020% 	[class: 7]
 [       4       2      21       9       6       1       0    1201       3      32]   93.901% 	[class: 8]
 [       9      10      14      16       7      18      12       2    1020      19]   90.506% 	[class: 9]
 [       5       1       1       9      23       8       2      26      10    1108]]  92.875% 	[class: 0]
 + average row correct: 94.209194779396% 
 + average rowUcol correct (VOC measure): 89.116522669792% 
 + global correct: 94.266666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s86ms | Step: 0ms      

==> time to test 1 sample = 0.43737196922302ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     182       0       1       0       1       3       4       0]   95.288% 	[class: 3]
 [       1       0       5     219       0       1       0       0       0       0]   96.903% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       1       0       0       0]   98.876% 	[class: 6]
 [       1       0       0       0       0       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       2       1       1       1       1       1       0       0     198       1]   96.117% 	[class: 9]
 [       1       0       0       1       1       0       0       1       0     200]]  98.039% 	[class: 0]
 + average row correct: 98.323904275894% 
 + average rowUcol correct (VOC measure): 96.676470637321% 
 + global correct: 98.3%
0.98323904275894	
==> found new best model!	
==> increasing patience from 8 to 10	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 6 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.935444911321ms	
ConfusionMatrix:
[[    1173       1       8       1       1       3       9       1       7       2]   97.264% 	[class: 1]
 [       1    1315       8       4       4       1       2       7       8       1]   97.335% 	[class: 2]
 [       4      11    1117      14       5       0       1      11      10       3]   94.983% 	[class: 3]
 [       6       6      17    1143       0      23       1      13      13       6]   93.078% 	[class: 4]
 [       1       7       4       2    1137       0       4       4       1      24]   96.030% 	[class: 5]
 [       2       1       1      17       2     996      11       0      12       6]   95.038% 	[class: 6]
 [       8       8       0       0       6       7    1176       0       3       0]   97.351% 	[class: 7]
 [       1       7      11       7       7       1       0    1209       6      30]   94.527% 	[class: 8]
 [      11       6      11      12       5      15       3       4    1044      16]   92.635% 	[class: 9]
 [      10       3       1       9      17       7       0      28       7    1111]]  93.127% 	[class: 0]
 + average row correct: 95.136859416962% 
 + average rowUcol correct (VOC measure): 90.766763687134% 
 + global correct: 95.175%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 12s112ms | Step: 0ms     

==> time to test 1 sample = 0.43641090393066ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     219       2       0       0       0       0       0       1       0]   98.649% 	[class: 2]
 [       0       0     181       0       1       0       1       4       4       0]   94.764% 	[class: 3]
 [       0       0       9     216       0       1       0       0       0       0]   95.575% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     176       1       0       1       0]   98.876% 	[class: 6]
 [       2       0       0       0       0       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       2       1       1       0       0     199       1]   96.602% 	[class: 9]
 [       1       0       0       1       4       2       0       0       0     196]]  96.078% 	[class: 0]
 + average row correct: 97.795642614365% 
 + average rowUcol correct (VOC measure): 95.615401268005% 
 + global correct: 97.75%
0.97795642614365	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 7 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93278958400091ms	
ConfusionMatrix:
[[    1171       1       3       0       0       5       9       1       9       7]   97.098% 	[class: 1]
 [       0    1321      13       0       6       0       1       6       3       1]   97.779% 	[class: 2]
 [       5       9    1107      14       4       0       2      20      13       2]   94.133% 	[class: 3]
 [       1       3      17    1160       1      17       2      14       7       6]   94.463% 	[class: 4]
 [       1       5       8       0    1137       0       9       1       4      19]   96.030% 	[class: 5]
 [       3       1       2      13       1    1000      10       1      12       5]   95.420% 	[class: 6]
 [      11       3       3       0       5      10    1170       0       6       0]   96.854% 	[class: 7]
 [       1       3      17      11       6       1       0    1212       3      25]   94.762% 	[class: 8]
 [       7      10      11      10       4      11       5       5    1049      15]   93.079% 	[class: 9]
 [       6       1       3       5      16      10       0      17      17    1118]]  93.713% 	[class: 0]
 + average row correct: 95.33308506012% 
 + average rowUcol correct (VOC measure): 91.115924715996% 
 + global correct: 95.375%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s87ms | Step: 0ms      

==> time to test 1 sample = 0.43889343738556ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     184       0       0       0       1       3       3       0]   96.335% 	[class: 3]
 [       1       0       6     217       0       1       0       1       0       0]   96.018% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       1       0       0       0]   99.438% 	[class: 6]
 [       2       0       0       0       0       1     182       0       0       0]   98.378% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       2       1       1       1       1       2       0       0     197       1]   95.631% 	[class: 9]
 [       0       0       0       0       4       1       0       4       0     195]]  95.588% 	[class: 0]
 + average row correct: 98.043569922447% 
 + average rowUcol correct (VOC measure): 96.074209809303% 
 + global correct: 98%
0.98043569922447	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 8 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93183666467667ms	
ConfusionMatrix:
[[    1175       2       4       3       0       1      10       0       7       4]   97.430% 	[class: 1]
 [       2    1310      14       5       4       1       3       5       6       1]   96.965% 	[class: 2]
 [       8       9    1107      13       4       2       2      16      12       3]   94.133% 	[class: 3]
 [       2       4      16    1156       1      21       1      15       8       4]   94.137% 	[class: 4]
 [       1       4       6       1    1140       1       5       4       2      20]   96.284% 	[class: 5]
 [       1       3       1      19       1     995       9       2      11       6]   94.943% 	[class: 6]
 [      11       1       0       0       6       9    1169       0      12       0]   96.772% 	[class: 7]
 [       2       5      10      10       4       0       0    1225       4      19]   95.778% 	[class: 8]
 [       8       8      10       7       2      10       7       1    1058      16]   93.878% 	[class: 9]
 [       8       3       2       6      15       8       0      21       8    1122]]  94.049% 	[class: 0]
 + average row correct: 95.436637401581% 
 + average rowUcol correct (VOC measure): 91.30007982254% 
 + global correct: 95.475%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s72ms | Step: 0ms      

==> time to test 1 sample = 0.43777859210968ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       1     180       0       1       0       1       4       4       0]   94.241% 	[class: 3]
 [       1       0       4     220       0       1       0       0       0       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     174       2       0       1       0]   97.753% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       1       0       1       1       1       1       0       0     201       0]   97.573% 	[class: 9]
 [       1       0       0       1       3       0       0       0       0     199]]  97.549% 	[class: 0]
 + average row correct: 98.301745653152% 
 + average rowUcol correct (VOC measure): 96.634414792061% 
 + global correct: 98.3%
0.98301745653152	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 9 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.93182275692622ms	
ConfusionMatrix:
[[    1177       1       5       1       3       1       7       0       7       4]   97.595% 	[class: 1]
 [       0    1319       9       1       4       0       3       8       7       0]   97.631% 	[class: 2]
 [       4      15    1118      11       1       0       2      14      10       1]   95.068% 	[class: 3]
 [       5       2      14    1157       1      18       0      15      11       5]   94.218% 	[class: 4]
 [       2       4       3       0    1141       1       5       5       2      21]   96.368% 	[class: 5]
 [       4       1       0      14       1    1004       9       0       9       6]   95.802% 	[class: 6]
 [       9       3       0       0       4       9    1172       1       9       1]   97.020% 	[class: 7]
 [       1       5      12      13       6       1       0    1218       2      21]   95.231% 	[class: 8]
 [       8       4       9       7       5      12       7       2    1059      14]   93.966% 	[class: 9]
 [       3       1       3       9      16      10       2      19       8    1122]]  94.049% 	[class: 0]
 + average row correct: 95.694819688797% 
 + average rowUcol correct (VOC measure): 91.765729784966% 
 + global correct: 95.725%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s71ms | Step: 0ms      

==> time to test 1 sample = 0.43727993965149ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     218       2       0       0       0       0       0       2       0]   98.198% 	[class: 2]
 [       0       0     183       0       0       0       1       3       4       0]   95.812% 	[class: 3]
 [       0       0       5     219       0       1       1       0       0       0]   96.903% 	[class: 4]
 [       0       0       0       0     181       0       0       0       0       4]   97.838% 	[class: 5]
 [       0       0       0       0       0     176       0       0       1       1]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     202       0       2]   99.020% 	[class: 8]
 [       0       1       1       1       0       1       0       0     201       1]   97.573% 	[class: 9]
 [       1       0       0       0       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.322632312775% 
 + average rowUcol correct (VOC measure): 96.691873669624% 
 + global correct: 98.3%
0.98322632312775	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 10 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.9314259092013ms	
ConfusionMatrix:
[[    1179       0       4       2       1       3       9       0       4       4]   97.761% 	[class: 1]
 [       1    1305      19       4       6       0       2       4       8       2]   96.595% 	[class: 2]
 [       5      11    1126      11       1       1       0      11       8       2]   95.748% 	[class: 3]
 [       3       5      14    1166       0      19       2       9       6       4]   94.951% 	[class: 4]
 [       1       4       4       1    1139       0       4       4       2      25]   96.199% 	[class: 5]
 [       7       0       3      15       0     995       7       2      13       6]   94.943% 	[class: 6]
 [       7       5       2       0       4       6    1178       0       6       0]   97.517% 	[class: 7]
 [       1       6      14       9       5       0       0    1225       1      18]   95.778% 	[class: 8]
 [       7       7       7       5       3      10       9       2    1066      11]   94.587% 	[class: 9]
 [       7       2       2       1      20       9       0      15       6    1131]]  94.803% 	[class: 0]
 + average row correct: 95.888274312019% 
 + average rowUcol correct (VOC measure): 92.1153652668% 
 + global correct: 95.916666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 12s63ms | Step: 0ms      

==> time to test 1 sample = 0.43615651130676ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       0       0       0       1       0]   99.550% 	[class: 2]
 [       0       0     179       0       1       0       1       6       4       0]   93.717% 	[class: 3]
 [       0       0       6     216       0       1       0       3       0       0]   95.575% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     176       1       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       2       0       1       0       0       1       0       0     202       0]   98.058% 	[class: 9]
 [       1       0       0       0       2       2       0       4       1     194]]  95.098% 	[class: 0]
 + average row correct: 98.037222623825% 
 + average rowUcol correct (VOC measure): 96.100334525108% 
 + global correct: 98%
0.98037222623825	
==> out of patience	
==> saving final model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	

