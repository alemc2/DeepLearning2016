==> processing options	
      -- a typical modern convolution network (conv+relu+pool)
      model = nn.Sequential()

      -- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize1, filtsize1))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize2, filtsize2))
      model:add(nn.ReLU())
      model:add(nn.SpatialDropout(0.5))
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 3 : standard 2-layer neural network
      model:add(nn.View(nstates[2]*flatsize*flatsize))
      model:add(nn.Linear(nstates[2]*flatsize*flatsize, nstates[3]))
      model:add(nn.ReLU())
      model:add(nn.Dropout(0.5))
      model:add(nn.Linear(nstates[3], nstates[4]))
      model:add(nn.ReLU())
      model:add(nn.Linear(nstates[4], noutputs))



==> switching to CUDA	
==> executing all	
==> downloading dataset	
==> using reduced training data, with part of that as test/validation data	
==> loading dataset	
==> preprocessing data	
==> preprocessing data: normalize globally	
==> verify statistics	
training data mean: -1.5106435531228e-08	
training data standard deviation: 1.0000000156287	
test data mean: 0.012629995727272	
test data standard deviation: 1.0162751665024	
==> visualizing data	
==> define parameters	
==> construct model	
==> here is the model:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> output]
  (1): nn.SpatialConvolutionMM(1 -> 128, 7x7)
  (2): nn.ReLU
  (3): nn.SpatialMaxPooling(2,2,2,2)
  (4): nn.SpatialConvolutionMM(128 -> 64, 5x5)
  (5): nn.ReLU
  (6): nn.SpatialDropout(0.500000)
  (7): nn.SpatialMaxPooling(2,2,2,2)
  (8): nn.View
  (9): nn.Linear(1024 -> 512)
  (10): nn.ReLU
  (11): nn.Dropout(0.500000)
  (12): nn.Linear(512 -> 128)
  (13): nn.ReLU
  (14): nn.Linear(128 -> 10)
}
==> define loss	
==> here is the loss function:	
nn.ClassNLLCriterion
==> defining some tools	
==> configuring optimizer	
==> defining training procedure	
==> defining test procedure	
==> training!	
==> doing epoch on training data:	
==> online epoch # 1 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3505809108416ms	
ConfusionMatrix:
[[    1123       0      15       8      12      10      14       6      12       6]   93.118% 	[class: 1]
 [       5    1259      18      14      13       1       4       6      27       4]   93.190% 	[class: 2]
 [      20      36     991      37      10       5       7      31      31       8]   84.269% 	[class: 3]
 [      13      32      44    1004       9      42       8      30      26      20]   81.759% 	[class: 4]
 [      19      11      10       6    1015       4      26       7       3      83]   85.726% 	[class: 5]
 [      24      18       3      38      18     835      43       8      38      23]   79.676% 	[class: 6]
 [      23      28       5       4      26      26    1075       0      12       9]   88.990% 	[class: 7]
 [      15      23      24      21      25       6       0    1095      14      56]   85.614% 	[class: 8]
 [      12      45      30      31      21      42      18      16     868      44]   77.019% 	[class: 9]
 [      22      21       6      23      83      18       5      55      26     934]]  78.290% 	[class: 0]
 + average row correct: 84.765005707741% 
 + average rowUcol correct (VOC measure): 73.800036907196% 
 + global correct: 84.991666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s292ms | Step: 0ms     

==> time to test 1 sample = 0.53424453735352ms	
ConfusionMatrix:
[[     198       0       0       0       0       1       0       0       0       0]   99.497% 	[class: 1]
 [       0     220       1       0       0       0       1       0       0       0]   99.099% 	[class: 2]
 [       0       0     169       5       1       0       2       9       5       0]   88.482% 	[class: 3]
 [       0       0       1     220       1       0       1       2       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       4       0     169       1       0       2       2]   94.944% 	[class: 6]
 [       2       0       0       0       3       3     177       0       0       0]   95.676% 	[class: 7]
 [       0       0       1       0       0       0       0     201       0       2]   98.529% 	[class: 8]
 [       1       2       2       7       1       2       2       0     184       5]   89.320% 	[class: 9]
 [       0       0       0       1       6       0       0       2       0     195]]  95.588% 	[class: 0]
 + average row correct: 95.794038176537% 
 + average rowUcol correct (VOC measure): 92.013927698135% 
 + global correct: 95.85%
0.95794038176537	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 2 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 19ms | Step: 1ms         
==> time to learn 1 sample = 1.3494484225909ms	
ConfusionMatrix:
[[    1170       0       6       2       3       3      10       2       6       4]   97.015% 	[class: 1]
 [       0    1296      15       8       4       1       4       9      13       1]   95.929% 	[class: 2]
 [       7      16    1094      18       3       1       2      22      11       2]   93.027% 	[class: 3]
 [       4       4      18    1138       1      21       2      26       7       7]   92.671% 	[class: 4]
 [       0       5       5       0    1125       1       8       2       5      33]   95.017% 	[class: 5]
 [       3       4       2      18       2     986       8       1      13      11]   94.084% 	[class: 6]
 [      10       4       2       0       6      11    1172       0       3       0]   97.020% 	[class: 7]
 [       2       8      16      15       4       0       0    1206       4      24]   94.292% 	[class: 8]
 [       5      12      10       8       5      14       8       4    1041      20]   92.369% 	[class: 9]
 [       9       1       1       4      22      15       0      17      14    1110]]  93.043% 	[class: 0]
 + average row correct: 94.446710348129% 
 + average rowUcol correct (VOC measure): 89.521533250809% 
 + global correct: 94.483333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s282ms | Step: 0ms     

==> time to test 1 sample = 0.53591060638428ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       1       1     179       0       1       0       1       3       5       0]   93.717% 	[class: 3]
 [       0       2      10     211       0       0       1       1       0       1]   93.363% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     175       2       0       0       0]   98.315% 	[class: 6]
 [       1       0       0       0       2       0     182       0       0       0]   98.378% 	[class: 7]
 [       0       0       4       0       0       0       0     197       0       3]   96.569% 	[class: 8]
 [       1       1       3       1       1       0       0       0     197       2]   95.631% 	[class: 9]
 [       1       0       0       1       2       0       0       0       0     200]]  98.039% 	[class: 0]
 + average row correct: 97.296894788742% 
 + average rowUcol correct (VOC measure): 94.72668170929% 
 + global correct: 97.25%
0.97296894788742	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 3 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3470594882965ms	
ConfusionMatrix:
[[    1174       0       3       1       2       3       9       3       8       3]   97.347% 	[class: 1]
 [       2    1310      12       5       6       0       3       7       6       0]   96.965% 	[class: 2]
 [       3      11    1112      13       4       1       2      16      11       3]   94.558% 	[class: 3]
 [       1       1      16    1164       1      18       0      10      12       5]   94.788% 	[class: 4]
 [       0       7       3       0    1138       2       5       2       3      24]   96.115% 	[class: 5]
 [       4       2       2      12       1     997       8       1       9      12]   95.134% 	[class: 6]
 [       7       6       1       1       6       7    1173       0       7       0]   97.103% 	[class: 7]
 [       3       4      18       9       1       2       0    1207       8      27]   94.371% 	[class: 8]
 [       5       6      10       5       8      14       7       1    1059      12]   93.966% 	[class: 9]
 [       9       1       0       5      21       9       1      14      10    1123]]  94.132% 	[class: 0]
 + average row correct: 95.447832942009% 
 + average rowUcol correct (VOC measure): 91.302760839462% 
 + global correct: 95.475%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s265ms | Step: 0ms     

==> time to test 1 sample = 0.5409095287323ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       1     207       3       0       0       0       5       1       5       0]   93.243% 	[class: 2]
 [       0       0     181       0       0       0       1       4       5       0]   94.764% 	[class: 3]
 [       0       0       7     214       0       0       1       1       2       1]   94.690% 	[class: 4]
 [       0       0       1       0     176       0       0       0       1       7]   95.135% 	[class: 5]
 [       0       0       0       1       0     175       2       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       2       0       1       1       0       0       0       0     201       1]   97.573% 	[class: 9]
 [       2       0       0       1       0       1       0       0       1     199]]  97.549% 	[class: 0]
 + average row correct: 96.978657245636% 
 + average rowUcol correct (VOC measure): 94.0798163414% 
 + global correct: 96.9%
0.96978657245636	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 4 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3486022353172ms	
ConfusionMatrix:
[[    1181       1       4       1       1       2       4       3       5       4]   97.927% 	[class: 1]
 [       0    1319      12       3       4       1       4       3       5       0]   97.631% 	[class: 2]
 [       4       8    1125      11       2       0       2      15       8       1]   95.663% 	[class: 3]
 [       3       2      15    1170       1      10       1      12       9       5]   95.277% 	[class: 4]
 [       1       2       7       1    1149       0       4       3       0      17]   97.044% 	[class: 5]
 [       3       1       1       9       1    1000      12       2       9      10]   95.420% 	[class: 6]
 [       7       6       1       0       7       6    1175       0       6       0]   97.268% 	[class: 7]
 [       2       4      14       6       3       0       0    1233       5      12]   96.403% 	[class: 8]
 [       7       6      11      11       2      14       7       4    1050      15]   93.168% 	[class: 9]
 [       7       2       0       6      16       8       1      13       8    1132]]  94.887% 	[class: 0]
 + average row correct: 96.068851947784% 
 + average rowUcol correct (VOC measure): 92.473667860031% 
 + global correct: 96.116666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s266ms | Step: 0ms     

==> time to test 1 sample = 0.53269600868225ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       0       0       0       0       0       1       0       0]   99.550% 	[class: 2]
 [       0       4     171       0       1       0       1       7       7       0]   89.529% 	[class: 3]
 [       0       0       3     216       1       0       0       3       3       0]   95.575% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     175       2       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       1       1       1       2       2       0       0       0     198       1]   96.117% 	[class: 9]
 [       0       0       0       1      10       2       0       2       0     189]]  92.647% 	[class: 0]
 + average row correct: 96.96959733963% 
 + average rowUcol correct (VOC measure): 94.098927378654% 
 + global correct: 96.95%
0.9696959733963	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 5 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3484645088514ms	
ConfusionMatrix:
[[    1186       0       4       2       0       2       5       0       4       3]   98.342% 	[class: 1]
 [       0    1322       9       3       2       2       0       6       5       2]   97.853% 	[class: 2]
 [       3      12    1130       8       3       0       1      13       6       0]   96.088% 	[class: 3]
 [       1       6       9    1169       1      16       2      10       8       6]   95.195% 	[class: 4]
 [       1       3       2       0    1149       0       7       0       4      18]   97.044% 	[class: 5]
 [       3       2       1      12       0    1004      10       1       8       7]   95.802% 	[class: 6]
 [       8       2       1       1       6       6    1176       0       8       0]   97.351% 	[class: 7]
 [       1       4      13       8       1       0       0    1235       3      14]   96.560% 	[class: 8]
 [       3       6       9       7       2       9       7       4    1067      13]   94.676% 	[class: 9]
 [       2       2       0       3      11       6       1      14       6    1148]]  96.228% 	[class: 0]
 + average row correct: 96.513931751251% 
 + average rowUcol correct (VOC measure): 93.293194770813% 
 + global correct: 96.55%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s264ms | Step: 0ms     

==> time to test 1 sample = 0.53331995010376ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     182       0       1       0       1       3       4       0]   95.288% 	[class: 3]
 [       1       0       4     217       1       0       0       1       1       1]   96.018% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       2       0     174       1       0       0       1]   97.753% 	[class: 6]
 [       0       0       0       0       2       0     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       2       0       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       1       1       1       0       0       0       0       0     200       3]   97.087% 	[class: 9]
 [       1       0       0       1       1       1       0       0       0     200]]  98.039% 	[class: 0]
 + average row correct: 98.022997975349% 
 + average rowUcol correct (VOC measure): 96.092656850815% 
 + global correct: 98%
0.98022997975349	
==> found new best model!	
==> increasing patience from 5 to 10	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 6 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3468381762505ms	
ConfusionMatrix:
[[    1182       0       4       0       1       2       9       0       5       3]   98.010% 	[class: 1]
 [       0    1319       8       2       5       2       4       8       3       0]   97.631% 	[class: 2]
 [       3       7    1135       6       3       0       1      12       7       2]   96.514% 	[class: 3]
 [       1       0       9    1188       0      11       1       6       8       4]   96.743% 	[class: 4]
 [       1       5       2       2    1148       0       6       2       1      17]   96.959% 	[class: 5]
 [       3       1       0       9       2    1013       6       0       8       6]   96.660% 	[class: 6]
 [       8       4       0       0       4       8    1179       0       5       0]   97.599% 	[class: 7]
 [       1       6      14       4       2       1       0    1239       3       9]   96.873% 	[class: 8]
 [       5       3      11       7       3      10       7       1    1071       9]   95.031% 	[class: 9]
 [       4       2       1       5      11       5       0      10       5    1150]]  96.396% 	[class: 0]
 + average row correct: 96.841596961021% 
 + average rowUcol correct (VOC measure): 93.881722688675% 
 + global correct: 96.866666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s246ms | Step: 0ms     

==> time to test 1 sample = 0.53372204303741ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     180       0       1       0       1       8       1       0]   94.241% 	[class: 3]
 [       0       0       2     220       0       1       1       1       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     184       0       1       0       0       0]   99.459% 	[class: 5]
 [       0       0       0       2       0     175       1       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       1       1       1       3       0       0       1       1     196       2]   95.146% 	[class: 9]
 [       0       0       0       1       0       4       0       2       0     197]]  96.569% 	[class: 0]
 + average row correct: 97.916836738586% 
 + average rowUcol correct (VOC measure): 95.897709727287% 
 + global correct: 97.9%
0.97916836738586	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 7 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3483040730158ms	
ConfusionMatrix:
[[    1195       1       2       0       1       1       2       0       2       2]   99.088% 	[class: 1]
 [       0    1325       9       4       5       0       1       3       4       0]   98.075% 	[class: 2]
 [       2       4    1138       7       4       1       0      13       6       1]   96.769% 	[class: 3]
 [       2       4       9    1184       1       8       1       7       6       6]   96.417% 	[class: 4]
 [       1       2       1       1    1159       1       6       3       0      10]   97.889% 	[class: 5]
 [       1       1       1      10       0    1017      10       0       8       0]   97.042% 	[class: 6]
 [       6       1       1       0       1       9    1188       0       2       0]   98.344% 	[class: 7]
 [       0       4       8       5       2       0       0    1248       2      10]   97.576% 	[class: 8]
 [       3       7       5       5       3       7       6       2    1082       7]   96.007% 	[class: 9]
 [       6       2       0       5      10       7       0      11       5    1147]]  96.144% 	[class: 0]
 + average row correct: 97.335140705109% 
 + average rowUcol correct (VOC measure): 94.820998907089% 
 + global correct: 97.358333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s266ms | Step: 0ms     

==> time to test 1 sample = 0.53505098819733ms	
ConfusionMatrix:
[[     196       0       0       0       0       0       3       0       0       0]   98.492% 	[class: 1]
 [       0     214       2       0       1       1       0       0       4       0]   96.396% 	[class: 2]
 [       0       0     181       1       1       0       1       3       4       0]   94.764% 	[class: 3]
 [       0       0       3     220       0       1       1       0       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     176       2       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       4       1       0       0       0     197       1       1]   96.569% 	[class: 8]
 [       1       0       1       0       1       0       0       0     201       2]   97.573% 	[class: 9]
 [       1       0       0       1       0       0       0       0       0     202]]  99.020% 	[class: 0]
 + average row correct: 97.903584241867% 
 + average rowUcol correct (VOC measure): 95.833748579025% 
 + global correct: 97.85%
0.97903584241867	
==> patience: 10	
==> doing epoch on training data:	
==> online epoch # 8 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3491788307826ms	
ConfusionMatrix:
[[    1187       0       4       0       1       3       8       0       0       3]   98.425% 	[class: 1]
 [       0    1330       8       2       1       0       0       4       5       1]   98.446% 	[class: 2]
 [       4       9    1140       4       3       0       1      12       2       1]   96.939% 	[class: 3]
 [       0       0       8    1193       0      10       0       7       7       3]   97.150% 	[class: 4]
 [       0       3       2       0    1155       0       3       4       0      17]   97.551% 	[class: 5]
 [       2       0       0       6       0    1027       6       2       2       3]   97.996% 	[class: 6]
 [       7       3       0       0       2       6    1186       0       4       0]   98.179% 	[class: 7]
 [       1       4      11       6       3       0       0    1241       0      13]   97.029% 	[class: 8]
 [       4       2       5       6       3       5       8       2    1085       7]   96.273% 	[class: 9]
 [       2       1       1       4      10       4       1       7       4    1159]]  97.150% 	[class: 0]
 + average row correct: 97.513667941093% 
 + average rowUcol correct (VOC measure): 95.155620574951% 
 + global correct: 97.525%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s273ms | Step: 0ms     

==> time to test 1 sample = 0.5328905582428ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     185       0       0       0       1       4       1       0]   96.859% 	[class: 3]
 [       0       0       3     220       0       0       0       1       2       0]   97.345% 	[class: 4]
 [       0       1       0       0     183       0       0       0       0       1]   98.919% 	[class: 5]
 [       0       0       0       2       0     175       0       0       1       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       1       0       0       0       0     203       1]   98.544% 	[class: 9]
 [       0       0       0       1       0       2       0       1       0     200]]  98.039% 	[class: 0]
 + average row correct: 98.753001093864% 
 + average rowUcol correct (VOC measure): 97.561571598053% 
 + global correct: 98.75%
0.98753001093864	
==> found new best model!	
==> increasing patience from 10 to 16	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 9 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3485363324483ms	
ConfusionMatrix:
[[    1192       0       0       0       0       0       7       0       3       4]   98.839% 	[class: 1]
 [       0    1331       6       2       1       0       1       6       2       2]   98.520% 	[class: 2]
 [       2       6    1136       8       3       0       0      13       6       2]   96.599% 	[class: 3]
 [       0       0      11    1191       0       8       0       7       7       4]   96.987% 	[class: 4]
 [       0       1       4       1    1154       1       3       1       3      16]   97.466% 	[class: 5]
 [       1       0       1       8       0    1025       3       2       4       4]   97.805% 	[class: 6]
 [       4       0       1       0       3       3    1194       0       3       0]   98.841% 	[class: 7]
 [       1       5       9       3       3       2       0    1244       2      10]   97.263% 	[class: 8]
 [       6       4       5       5       1       2       5       1    1091       7]   96.806% 	[class: 9]
 [       5       1       0       4      12       3       0       9       8    1151]]  96.479% 	[class: 0]
 + average row correct: 97.56056189537% 
 + average rowUcol correct (VOC measure): 95.254222750664% 
 + global correct: 97.575%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s272ms | Step: 0ms     

==> time to test 1 sample = 0.53638744354248ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     217       2       0       0       0       1       0       2       0]   97.748% 	[class: 2]
 [       0       0     183       0       1       0       1       3       3       0]   95.812% 	[class: 3]
 [       0       0       3     219       1       0       1       1       1       0]   96.903% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       2       0     174       1       0       1       0]   97.753% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       1       0       0       0       0     202       2]   98.058% 	[class: 9]
 [       2       0       0       0       1       0       0       0       0     201]]  98.529% 	[class: 0]
 + average row correct: 98.326914310455% 
 + average rowUcol correct (VOC measure): 96.683949828148% 
 + global correct: 98.3%
0.98326914310455	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 10 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3500592509905ms	
ConfusionMatrix:
[[    1195       0       2       0       0       0       4       1       2       2]   99.088% 	[class: 1]
 [       0    1331       6       3       2       0       2       5       1       1]   98.520% 	[class: 2]
 [       2       8    1140       4       3       0       2      11       6       0]   96.939% 	[class: 3]
 [       0       1       8    1201       0       9       0       3       2       4]   97.801% 	[class: 4]
 [       1       1       3       0    1157       0       4       2       1      15]   97.720% 	[class: 5]
 [       1       1       1       9       0    1018       6       2       6       4]   97.137% 	[class: 6]
 [       6       1       3       0       0       6    1188       0       4       0]   98.344% 	[class: 7]
 [       1       6       8       4       0       1       0    1250       2       7]   97.733% 	[class: 8]
 [       1       3       7       2       3       7       2       1    1094       7]   97.072% 	[class: 9]
 [       5       2       0       2      11       3       1       7       4    1158]]  97.066% 	[class: 0]
 + average row correct: 97.741965651512% 
 + average rowUcol correct (VOC measure): 95.602094531059% 
 + global correct: 97.766666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s285ms | Step: 0ms     

==> time to test 1 sample = 0.53383994102478ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     184       0       0       0       1       4       2       0]   96.335% 	[class: 3]
 [       0       0       5     215       0       0       0       1       4       1]   95.133% 	[class: 4]
 [       0       1       0       0     183       0       0       0       0       1]   98.919% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     202       1       0]   99.020% 	[class: 8]
 [       0       1       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       1       5       0       0       1     196]]  96.078% 	[class: 0]
 + average row correct: 98.35088789463% 
 + average rowUcol correct (VOC measure): 96.692762970924% 
 + global correct: 98.3%
0.9835088789463	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 11 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3485566775004ms	
ConfusionMatrix:
[[    1189       2       1       0       1       1       7       0       3       2]   98.590% 	[class: 1]
 [       0    1335       7       3       1       0       1       3       1       0]   98.816% 	[class: 2]
 [       2       5    1146       8       1       0       0       8       5       1]   97.449% 	[class: 3]
 [       0       0      14    1188       1       8       0       8       3       6]   96.743% 	[class: 4]
 [       1       1       1       0    1159       1       4       2       1      14]   97.889% 	[class: 5]
 [       2       1       0       8       1    1022       6       1       4       3]   97.519% 	[class: 6]
 [       5       1       0       0       2       5    1190       0       5       0]   98.510% 	[class: 7]
 [       0       4      11       4       1       0       0    1256       1       2]   98.202% 	[class: 8]
 [       4       1       8       5       1       3       5       1    1095       4]   97.161% 	[class: 9]
 [       1       0       0       0       9       9       0       8       4    1162]]  97.402% 	[class: 0]
 + average row correct: 97.827908396721% 
 + average rowUcol correct (VOC measure): 95.756857395172% 
 + global correct: 97.85%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s263ms | Step: 0ms     

==> time to test 1 sample = 0.5315899848938ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     183       0       1       0       1       4       2       0]   95.812% 	[class: 3]
 [       0       0       5     218       0       0       0       1       1       1]   96.460% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       1       1       1       0       0       0     201]]  98.529% 	[class: 0]
 + average row correct: 98.681720495224% 
 + average rowUcol correct (VOC measure): 97.353040575981% 
 + global correct: 98.65%
0.98681720495224	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 12 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3489931623141ms	
ConfusionMatrix:
[[    1192       1       2       0       0       1       3       0       2       5]   98.839% 	[class: 1]
 [       0    1335       6       2       2       0       2       3       1       0]   98.816% 	[class: 2]
 [       2       6    1147       6       1       0       0      10       4       0]   97.534% 	[class: 3]
 [       3       1       7    1198       0       6       0       6       6       1]   97.557% 	[class: 4]
 [       0       3       1       1    1170       1       2       0       2       4]   98.818% 	[class: 5]
 [       3       0       0       6       0    1027       4       1       4       3]   97.996% 	[class: 6]
 [       2       1       0       1       1       3    1194       0       6       0]   98.841% 	[class: 7]
 [       1       3       9       6       0       0       0    1249       5       6]   97.654% 	[class: 8]
 [       3       2       4       5       2       8       5       3    1088       7]   96.539% 	[class: 9]
 [       7       1       1       4      11       4       1       5       4    1155]]  96.815% 	[class: 0]
 + average row correct: 97.94093132019% 
 + average rowUcol correct (VOC measure): 95.973099470139% 
 + global correct: 97.958333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s272ms | Step: 0ms     

==> time to test 1 sample = 0.53389644622803ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     183       0       1       0       1       3       3       0]   95.812% 	[class: 3]
 [       0       0       5     216       1       0       0       1       2       1]   95.575% 	[class: 4]
 [       0       0       0       0     183       0       0       0       0       2]   98.919% 	[class: 5]
 [       0       0       0       0       0     177       0       0       0       1]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       1       1       0       1       0       0       0     201       2]   97.573% 	[class: 9]
 [       1       0       0       0       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.44303548336% 
 + average rowUcol correct (VOC measure): 96.884032487869% 
 + global correct: 98.4%
0.9844303548336	
==> patience: 16	
==> doing epoch on training data:	
==> online epoch # 13 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3484210769335ms	
ConfusionMatrix:
[[    1191       1       3       0       1       1       5       0       1       3]   98.756% 	[class: 1]
 [       0    1330       3       2       6       0       2       4       3       1]   98.446% 	[class: 2]
 [       2       5    1152       3       2       0       2       7       3       0]   97.959% 	[class: 3]
 [       0       0       7    1197       1       7       1       8       2       5]   97.476% 	[class: 4]
 [       0       3       2       0    1163       0       3       0       2      11]   98.226% 	[class: 5]
 [       1       1       0       6       0    1028       7       0       2       3]   98.092% 	[class: 6]
 [       5       2       1       1       2       5    1188       0       4       0]   98.344% 	[class: 7]
 [       0       5       8       7       1       0       0    1251       2       5]   97.811% 	[class: 8]
 [       1       1       3       3       0       5       4       3    1101       6]   97.693% 	[class: 9]
 [       6       2       1       2       9       6       0       4       4    1159]]  97.150% 	[class: 0]
 + average row correct: 97.995271086693% 
 + average rowUcol correct (VOC measure): 96.065838336945% 
 + global correct: 98%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s262ms | Step: 0ms     

==> time to test 1 sample = 0.53182351589203ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     187       0       1       0       0       3       0       0]   97.906% 	[class: 3]
 [       0       0       4     218       0       0       1       1       1       1]   96.460% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       1       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       0       0       0       0       0       1     203]]  99.510% 	[class: 0]
 + average row correct: 99.144939184189% 
 + average rowUcol correct (VOC measure): 98.254848122597% 
 + global correct: 99.1%
0.99144939184189	
==> found new best model!	
==> increasing patience from 16 to 26	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 14 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3475434184074ms	
ConfusionMatrix:
[[    1192       1       4       1       0       2       2       0       1       3]   98.839% 	[class: 1]
 [       0    1332       8       0       3       1       0       4       3       0]   98.594% 	[class: 2]
 [       1       6    1144       7       0       1       2       8       6       1]   97.279% 	[class: 3]
 [       1       0       9    1197       0       7       2       5       6       1]   97.476% 	[class: 4]
 [       0       3       0       0    1163       0       2       1       1      14]   98.226% 	[class: 5]
 [       3       1       1       3       0    1026       4       1       4       5]   97.901% 	[class: 6]
 [       4       0       1       0       1       3    1197       0       2       0]   99.089% 	[class: 7]
 [       1       4       6       3       0       0       0    1258       0       7]   98.358% 	[class: 8]
 [       2       3       3       6       5       8       2       2    1092       4]   96.894% 	[class: 9]
 [       4       1       0       0       9       5       0       7       7    1160]]  97.234% 	[class: 0]
 + average row correct: 97.989013791084% 
 + average rowUcol correct (VOC measure): 96.063370108604% 
 + global correct: 98.008333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s272ms | Step: 0ms     

==> time to test 1 sample = 0.54119002819061ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     217       1       0       0       0       0       0       3       1]   97.748% 	[class: 2]
 [       0       1     186       0       1       0       1       2       0       0]   97.382% 	[class: 3]
 [       0       0       4     219       0       0       0       1       1       1]   96.903% 	[class: 4]
 [       0       1       0       0     183       0       0       0       0       1]   98.919% 	[class: 5]
 [       0       0       0       0       0     175       1       0       0       2]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       0       0       0       0       0       0       0       1       1     202]]  99.020% 	[class: 0]
 + average row correct: 98.729778528214% 
 + average rowUcol correct (VOC measure): 97.468138337135% 
 + global correct: 98.7%
0.98729778528213	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 15 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3475216825803ms	
ConfusionMatrix:
[[    1193       0       1       0       1       1       3       0       3       4]   98.922% 	[class: 1]
 [       1    1333       5       2       1       0       1       4       3       1]   98.668% 	[class: 2]
 [       1       7    1151       4       1       0       0       6       6       0]   97.874% 	[class: 3]
 [       0       2       5    1202       0       9       0       5       3       2]   97.883% 	[class: 4]
 [       0       2       2       0    1161       1       4       1       1      12]   98.057% 	[class: 5]
 [       0       0       0       6       0    1030       3       1       3       5]   98.282% 	[class: 6]
 [       4       2       0       1       2       2    1192       0       5       0]   98.675% 	[class: 7]
 [       1       6       5       4       2       1       0    1253       0       7]   97.967% 	[class: 8]
 [       3       2       6       3       1       3       7       1    1095       6]   97.161% 	[class: 9]
 [       2       0       1       4      13       3       0       8       2    1160]]  97.234% 	[class: 0]
 + average row correct: 98.072358369827% 
 + average rowUcol correct (VOC measure): 96.225923895836% 
 + global correct: 98.083333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s254ms | Step: 0ms     

==> time to test 1 sample = 0.53318345546722ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     219       1       0       0       1       1       0       0       0]   98.649% 	[class: 2]
 [       0       0     184       1       1       0       1       3       1       0]   96.335% 	[class: 3]
 [       0       0       7     216       0       0       0       1       2       0]   95.575% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     178       0       0       0       0]   100.000% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     202       1       1]   99.020% 	[class: 8]
 [       0       1       1       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       0       0       1       0       1       5     196]]  96.078% 	[class: 0]
 + average row correct: 98.366013169289% 
 + average rowUcol correct (VOC measure): 96.72731757164% 
 + global correct: 98.3%
0.98366013169289	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 16 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.348276078701ms	
ConfusionMatrix:
[[    1192       0       3       0       1       1       3       1       2       3]   98.839% 	[class: 1]
 [       1    1331       6       1       2       0       2       6       1       1]   98.520% 	[class: 2]
 [       2       3    1150       8       1       0       1       7       4       0]   97.789% 	[class: 3]
 [       1       1       7    1203       0       5       0       2       5       4]   97.964% 	[class: 4]
 [       0       2       3       0    1168       0       4       0       1       6]   98.649% 	[class: 5]
 [       0       0       0       5       0    1032       4       0       3       4]   98.473% 	[class: 6]
 [       3       1       1       0       1       5    1195       0       2       0]   98.924% 	[class: 7]
 [       1       3       5       3       0       1       0    1259       3       4]   98.436% 	[class: 8]
 [       6       1       4       2       2       2       5       2    1098       5]   97.427% 	[class: 9]
 [       2       1       0       2       7       4       1       5       4    1167]]  97.821% 	[class: 0]
 + average row correct: 98.284150362015% 
 + average rowUcol correct (VOC measure): 96.623464822769% 
 + global correct: 98.291666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s259ms | Step: 0ms     

==> time to test 1 sample = 0.53092503547668ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       0       0       1       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     187       0       1       0       1       2       0       0]   97.906% 	[class: 3]
 [       0       1       7     216       0       0       0       1       1       0]   95.575% 	[class: 4]
 [       0       1       0       0     183       0       0       0       0       1]   98.919% 	[class: 5]
 [       0       0       0       0       0     176       1       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       1       1       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       0       1       1       0       1       0       0       0     201       2]   97.573% 	[class: 9]
 [       0       0       0       0       0       0       0       0       1     203]]  99.510% 	[class: 0]
 + average row correct: 98.687601685524% 
 + average rowUcol correct (VOC measure): 97.38371014595% 
 + global correct: 98.65%
0.98687601685524	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 17 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 19ms | Step: 1ms         
==> time to learn 1 sample = 1.3476444284121ms	
ConfusionMatrix:
[[    1193       0       1       0       0       1       2       0       3       6]   98.922% 	[class: 1]
 [       2    1339       2       1       0       0       0       4       2       1]   99.112% 	[class: 2]
 [       4       2    1152       5       4       1       0       4       2       2]   97.959% 	[class: 3]
 [       2       2       4    1198       0       7       0       7       6       2]   97.557% 	[class: 4]
 [       0       1       1       0    1162       0       2       4       1      13]   98.142% 	[class: 5]
 [       1       1       0       2       0    1034       3       0       6       1]   98.664% 	[class: 6]
 [       3       2       0       0       1       1    1198       0       3       0]   99.172% 	[class: 7]
 [       0       5       8       4       2       1       0    1251       1       7]   97.811% 	[class: 8]
 [       2       1       2       7       0       6       6       1    1100       2]   97.604% 	[class: 9]
 [       2       1       0       1       8       2       0       8       5    1166]]  97.737% 	[class: 0]
 + average row correct: 98.268005847931% 
 + average rowUcol correct (VOC measure): 96.596349477768% 
 + global correct: 98.275%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s269ms | Step: 0ms     

==> time to test 1 sample = 0.53889548778534ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       1     178       1       0       0       1       9       1       0]   93.194% 	[class: 3]
 [       1       0       1     220       1       1       1       0       1       0]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       0       0     177       0       0       1       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       0       0       0       0       0       0     206       0]   100.000% 	[class: 9]
 [       4       0       0       1       3       1       0       0       1     194]]  95.098% 	[class: 0]
 + average row correct: 98.457257151604% 
 + average rowUcol correct (VOC measure): 96.939906477928% 
 + global correct: 98.45%
0.98457257151604	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 18 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 19ms | Step: 1ms         
==> time to learn 1 sample = 1.3474619984627ms	
ConfusionMatrix:
[[    1197       0       2       0       0       1       1       2       2       1]   99.254% 	[class: 1]
 [       0    1337       3       1       1       2       1       3       2       1]   98.964% 	[class: 2]
 [       1       6    1149       2       1       0       0      12       5       0]   97.704% 	[class: 3]
 [       0       1       5    1204       0       4       0       3       7       4]   98.046% 	[class: 4]
 [       0       0       3       0    1164       1       3       0       1      12]   98.311% 	[class: 5]
 [       2       0       0       5       0    1028       7       0       4       2]   98.092% 	[class: 6]
 [       4       0       0       1       2       1    1198       0       2       0]   99.172% 	[class: 7]
 [       0       3       6       4       2       0       0    1260       0       4]   98.514% 	[class: 8]
 [       1       2       3       1       1       6       1       2    1105       5]   98.048% 	[class: 9]
 [       2       0       1       2      14       1       0       7       5    1161]]  97.318% 	[class: 0]
 + average row correct: 98.342180848122% 
 + average rowUcol correct (VOC measure): 96.748417019844% 
 + global correct: 98.358333333333%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s265ms | Step: 0ms     

==> time to test 1 sample = 0.53964400291443ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       0       0       0       0       0       1       0       0]   99.550% 	[class: 2]
 [       0       0     184       0       1       0       1       5       0       0]   96.335% 	[class: 3]
 [       0       2       5     215       0       0       1       1       1       1]   95.133% 	[class: 4]
 [       0       1       0       0     183       0       0       0       0       1]   98.919% 	[class: 5]
 [       0       0       0       1       0     176       0       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       1       0       0       0       0       0     204       1]   99.029% 	[class: 9]
 [       1       0       0       0       0       0       0       0       0     203]]  99.510% 	[class: 0]
 + average row correct: 98.585640788078% 
 + average rowUcol correct (VOC measure): 97.186560630798% 
 + global correct: 98.55%
0.98585640788078	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 19 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 21ms | Step: 1ms         
==> time to learn 1 sample = 1.3812385002772ms	
ConfusionMatrix:
[[    1196       0       1       0       1       3       1       0       3       1]   99.171% 	[class: 1]
 [       0    1331       8       2       1       0       1       5       3       0]   98.520% 	[class: 2]
 [       2       7    1150       6       2       0       0       5       3       1]   97.789% 	[class: 3]
 [       1       1       5    1204       0       8       0       4       3       2]   98.046% 	[class: 4]
 [       1       2       1       0    1166       0       1       1       2      10]   98.480% 	[class: 5]
 [       1       1       0       6       0    1026       5       2       5       2]   97.901% 	[class: 6]
 [       2       1       0       0       1       4    1197       0       3       0]   99.089% 	[class: 7]
 [       1       7       5       4       0       1       0    1252       0       9]   97.889% 	[class: 8]
 [       3       3       3       3       1       4       4       2    1100       4]   97.604% 	[class: 9]
 [       3       0       0       0       8       1       0       9       4    1168]]  97.904% 	[class: 0]
 + average row correct: 98.239272236824% 
 + average rowUcol correct (VOC measure): 96.548155546188% 
 + global correct: 98.25%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s763ms | Step: 0ms     

==> time to test 1 sample = 0.58512997627258ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     185       1       0       0       1       3       1       0]   96.859% 	[class: 3]
 [       0       1       5     217       0       0       0       1       1       1]   96.018% 	[class: 4]
 [       0       0       0       0     182       0       0       0       0       3]   98.378% 	[class: 5]
 [       0       0       0       1       0     176       0       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       1       1       1       0       0       1       0       0     201       1]   97.573% 	[class: 9]
 [       1       0       0       0       0       0       0       1       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.428767323494% 
 + average rowUcol correct (VOC measure): 96.892644762993% 
 + global correct: 98.4%
0.98428767323494	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 20 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3757361570994ms	
ConfusionMatrix:
[[    1195       1       3       1       0       1       2       0       2       1]   99.088% 	[class: 1]
 [       0    1331       6       2       2       1       2       5       2       0]   98.520% 	[class: 2]
 [       3       4    1154       3       1       0       0       6       4       1]   98.129% 	[class: 3]
 [       0       1       6    1207       0       5       0       3       3       3]   98.290% 	[class: 4]
 [       0       0       1       0    1166       0       3       1       2      11]   98.480% 	[class: 5]
 [       1       1       0       5       0    1028       3       2       4       4]   98.092% 	[class: 6]
 [       1       4       0       0       0       2    1199       0       1       1]   99.255% 	[class: 7]
 [       2       5       8       2       0       0       0    1257       0       5]   98.280% 	[class: 8]
 [       1       3       4       0       1       4       2       1    1106       5]   98.137% 	[class: 9]
 [       4       1       0       2       7       4       0       5       5    1165]]  97.653% 	[class: 0]
 + average row correct: 98.392249345779% 
 + average rowUcol correct (VOC measure): 96.842020153999% 
 + global correct: 98.4%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s607ms | Step: 0ms     

==> time to test 1 sample = 0.54000544548035ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       0     187       0       0       0       1       3       0       0]   97.906% 	[class: 3]
 [       0       0       5     219       1       0       0       0       0       1]   96.903% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       1       0     176       0       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       0       1       3       0       0       0       0     201       1]   97.573% 	[class: 9]
 [       1       0       0       0       1       0       0       0       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.874399065971% 
 + average rowUcol correct (VOC measure): 97.762833237648% 
 + global correct: 98.85%
0.98874399065971	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 21 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3344030976295ms	
ConfusionMatrix:
[[    1194       0       2       0       0       2       5       0       2       1]   99.005% 	[class: 1]
 [       0    1342       1       0       0       1       1       3       3       0]   99.334% 	[class: 2]
 [       1       1    1155       6       0       0       0       9       3       1]   98.214% 	[class: 3]
 [       0       1       5    1211       0       3       0       3       3       2]   98.616% 	[class: 4]
 [       0       1       0       0    1172       0       1       1       0       9]   98.986% 	[class: 5]
 [       1       2       0       4       0    1031       4       0       5       1]   98.378% 	[class: 6]
 [       5       0       0       0       1       4    1196       0       2       0]   99.007% 	[class: 7]
 [       0       4       6       3       2       0       0    1259       1       4]   98.436% 	[class: 8]
 [       3       0       4       3       2       4       1       2    1104       4]   97.959% 	[class: 9]
 [       3       1       0       2       9       2       0       4       1    1171]]  98.156% 	[class: 0]
 + average row correct: 98.609107732773% 
 + average rowUcol correct (VOC measure): 97.264018654823% 
 + global correct: 98.625%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [=============================================================== 2000/2000 ===========>] Tot: 17s95ms | Step: 0ms      

==> time to test 1 sample = 0.53186500072479ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     219       0       0       0       1       0       0       2       0]   98.649% 	[class: 2]
 [       0       0     182       0       0       0       1       4       4       0]   95.288% 	[class: 3]
 [       0       1       5     216       0       0       0       1       3       0]   95.575% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     177       1       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       0       1]   99.510% 	[class: 8]
 [       0       1       1       0       0       0       0       0     204       0]   99.029% 	[class: 9]
 [       0       0       0       1       0       2       0       0       0     201]]  98.529% 	[class: 0]
 + average row correct: 98.497531414032% 
 + average rowUcol correct (VOC measure): 97.004480361938% 
 + global correct: 98.45%
0.98497531414032	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 22 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3485614856084ms	
ConfusionMatrix:
[[    1198       0       2       0       0       1       0       0       3       2]   99.337% 	[class: 1]
 [       0    1339       5       1       1       0       0       2       3       0]   99.112% 	[class: 2]
 [       2       8    1152       4       1       0       0       4       4       1]   97.959% 	[class: 3]
 [       0       0       4    1203       1      12       0       4       0       4]   97.964% 	[class: 4]
 [       1       3       3       0    1167       0       3       1       1       5]   98.564% 	[class: 5]
 [       0       0       1       9       0    1025       5       1       4       3]   97.805% 	[class: 6]
 [       1       1       0       0       1       3    1199       0       3       0]   99.255% 	[class: 7]
 [       0       2       4       1       3       1       0    1260       2       6]   98.514% 	[class: 8]
 [       5       2       4       4       2       6       3       0    1097       4]   97.338% 	[class: 9]
 [       1       1       0       4       5       2       0       3       3    1174]]  98.407% 	[class: 0]
 + average row correct: 98.425617814064% 
 + average rowUcol correct (VOC measure): 96.909253001213% 
 + global correct: 98.45%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s262ms | Step: 0ms     

==> time to test 1 sample = 0.53053450584412ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     187       0       1       0       1       0       2       0]   97.906% 	[class: 3]
 [       0       0       5     218       0       0       0       1       2       0]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     175       2       0       1       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       7       0       0       0       0     195       1       1]   95.588% 	[class: 8]
 [       1       0       1       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       2       0       0       0       0       2       0       1       8     191]]  93.627% 	[class: 0]
 + average row correct: 97.849596738815% 
 + average rowUcol correct (VOC measure): 95.741213560104% 
 + global correct: 97.8%
0.97849596738815	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 23 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 21ms | Step: 1ms         
==> time to learn 1 sample = 1.360099752744ms	
ConfusionMatrix:
[[    1197       0       2       0       0       1       4       0       1       1]   99.254% 	[class: 1]
 [       0    1333       6       1       1       0       1       4       3       2]   98.668% 	[class: 2]
 [       1       6    1150       2       0       0       1       5       9       2]   97.789% 	[class: 3]
 [       0       0       5    1203       0      10       0       3       4       3]   97.964% 	[class: 4]
 [       0       2       1       0    1173       0       1       1       0       6]   99.071% 	[class: 5]
 [       2       1       0       6       0    1033       4       0       1       1]   98.569% 	[class: 6]
 [       4       0       0       0       4       1    1194       0       5       0]   98.841% 	[class: 7]
 [       0       2       6       2       2       0       0    1261       0       6]   98.593% 	[class: 8]
 [       4       1      10       6       0       2       4       0    1096       4]   97.249% 	[class: 9]
 [       3       2       0       3       4       2       1       6       2    1170]]  98.072% 	[class: 0]
 + average row correct: 98.406944870949% 
 + average rowUcol correct (VOC measure): 96.866315603256% 
 + global correct: 98.416666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s455ms | Step: 0ms     

==> time to test 1 sample = 0.5577894449234ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       1       3       0       0]   97.382% 	[class: 3]
 [       0       0       5     218       0       1       0       0       2       0]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       0       0     175       2       0       1       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     203       1       0]   99.510% 	[class: 8]
 [       0       0       1       0       0       0       0       0     205       0]   99.515% 	[class: 9]
 [       1       0       0       1       0       0       0       0       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.8707447052% 
 + average rowUcol correct (VOC measure): 97.725485563278% 
 + global correct: 98.85%
0.988707447052	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 24 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3522978226344ms	
ConfusionMatrix:
[[    1192       1       2       0       0       0       5       0       4       2]   98.839% 	[class: 1]
 [       1    1336       5       0       1       0       1       5       1       1]   98.890% 	[class: 2]
 [       2       3    1161       5       0       0       0       3       2       0]   98.724% 	[class: 3]
 [       0       0       3    1209       0       6       0       4       2       4]   98.453% 	[class: 4]
 [       1       0       2       0    1170       0       2       1       1       7]   98.818% 	[class: 5]
 [       1       0       1       4       0    1035       2       0       5       0]   98.760% 	[class: 6]
 [       6       1       1       0       2       4    1193       0       1       0]   98.758% 	[class: 7]
 [       0       3       7       1       3       0       0    1261       0       4]   98.593% 	[class: 8]
 [       2       0       2       2       1       3       3       0    1113       1]   98.758% 	[class: 9]
 [       1       0       0       1       5       2       0       7       4    1173]]  98.324% 	[class: 0]
 + average row correct: 98.691546916962% 
 + average rowUcol correct (VOC measure): 97.405604720116% 
 + global correct: 98.691666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s318ms | Step: 0ms     

==> time to test 1 sample = 0.53615951538086ms	
ConfusionMatrix:
[[     199       0       0       0       0       0       0       0       0       0]   100.000% 	[class: 1]
 [       0     221       0       0       0       1       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     186       0       1       0       0       4       0       0]   97.382% 	[class: 3]
 [       0       0       4     218       1       0       0       1       1       1]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       0       1]   99.459% 	[class: 5]
 [       0       0       0       3       0     175       0       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       1       0     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     204       0       0]   100.000% 	[class: 8]
 [       0       0       1       0       0       0       0       0     204       1]   99.029% 	[class: 9]
 [       1       0       0       1       0       0       0       0       0     202]]  99.020% 	[class: 0]
 + average row correct: 98.867417573929% 
 + average rowUcol correct (VOC measure): 97.757019996643% 
 + global correct: 98.85%
0.98867417573929	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 25 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3510392506917ms	
ConfusionMatrix:
[[    1194       0       1       0       1       1       3       1       2       3]   99.005% 	[class: 1]
 [       0    1341       0       2       1       0       0       2       4       1]   99.260% 	[class: 2]
 [       4       0    1159       6       2       1       0       4       0       0]   98.554% 	[class: 3]
 [       0       3       6    1210       0       5       0       1       2       1]   98.534% 	[class: 4]
 [       0       2       1       0    1167       0       0       4       2       8]   98.564% 	[class: 5]
 [       3       0       0       5       0    1033       2       0       4       1]   98.569% 	[class: 6]
 [       4       2       1       0       0       3    1198       0       0       0]   99.172% 	[class: 7]
 [       0       3       5       3       2       0       0    1257       0       9]   98.280% 	[class: 8]
 [       1       2       2       1       1       1       1       2    1114       2]   98.846% 	[class: 9]
 [       2       0       0       1       7       2       0       7       1    1173]]  98.324% 	[class: 0]
 + average row correct: 98.710843920708% 
 + average rowUcol correct (VOC measure): 97.459832429886% 
 + global correct: 98.716666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s309ms | Step: 0ms     

==> time to test 1 sample = 0.53918290138245ms	
ConfusionMatrix:
[[     197       0       0       0       0       0       2       0       0       0]   98.995% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     186       0       1       0       1       3       0       0]   97.382% 	[class: 3]
 [       0       0       5     220       0       0       0       0       0       1]   97.345% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     202       0       0]   99.020% 	[class: 8]
 [       0       0       2       0       0       1       0       0     203       0]   98.544% 	[class: 9]
 [       1       0       0       2       4       2       0       1       1     193]]  94.608% 	[class: 0]
 + average row correct: 98.443074822426% 
 + average rowUcol correct (VOC measure): 96.856105923653% 
 + global correct: 98.4%
0.98443074822426	
==> patience: 26	
==> doing epoch on training data:	
==> online epoch # 26 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 20ms | Step: 1ms         
==> time to learn 1 sample = 1.3571330904961ms	
ConfusionMatrix:
[[    1194       1       0       0       0       2       4       0       1       4]   99.005% 	[class: 1]
 [       0    1337       5       0       0       0       1       3       3       2]   98.964% 	[class: 2]
 [       1       4    1152       4       2       0       0      10       2       1]   97.959% 	[class: 3]
 [       1       0       3    1213       0       5       0       3       1       2]   98.779% 	[class: 4]
 [       0       2       1       0    1172       0       1       1       1       6]   98.986% 	[class: 5]
 [       0       0       0       6       0    1036       2       0       2       2]   98.855% 	[class: 6]
 [       1       1       1       0       2       3    1200       0       0       0]   99.338% 	[class: 7]
 [       0       6       7       3       2       1       0    1255       1       4]   98.124% 	[class: 8]
 [       3       2       3       2       1       3       3       1    1104       5]   97.959% 	[class: 9]
 [       4       1       0       4       3       2       0       6       4    1169]]  97.988% 	[class: 0]
 + average row correct: 98.595657944679% 
 + average rowUcol correct (VOC measure): 97.237343192101% 
 + global correct: 98.6%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 17s377ms | Step: 0ms     

==> time to test 1 sample = 0.53644096851349ms	
ConfusionMatrix:
[[     198       0       0       0       0       0       1       0       0       0]   99.497% 	[class: 1]
 [       0     220       1       0       0       1       0       0       0       0]   99.099% 	[class: 2]
 [       0       0     184       0       0       0       1       3       3       0]   96.335% 	[class: 3]
 [       0       0       6     216       1       0       0       1       1       1]   95.575% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     177       0       0       0       0]   99.438% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       1       0       0       0       0     203       0       0]   99.510% 	[class: 8]
 [       0       0       1       0       0       0       0       0     203       2]   98.544% 	[class: 9]
 [       2       0       0       0       1       1       0       0       1     199]]  97.549% 	[class: 0]
 + average row correct: 98.554760217667% 
 + average rowUcol correct (VOC measure): 97.089500427246% 
 + global correct: 98.5%
0.98554760217667	
==> out of patience	
==> saving final model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	

