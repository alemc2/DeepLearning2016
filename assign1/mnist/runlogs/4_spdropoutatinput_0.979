      -- a typical modern convolution network (conv+relu+pool)
      model = nn.Sequential()

      model:add(nn.SpatialDropout(0.5))

      -- stage 1 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nfeats, nstates[1], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 2 : filter bank -> squashing -> L2 pooling -> normalization
      model:add(nn.SpatialConvolutionMM(nstates[1], nstates[2], filtsize, filtsize))
      model:add(nn.ReLU())
      model:add(nn.SpatialMaxPooling(poolsize,poolsize,poolsize,poolsize))

      -- stage 3 : standard 2-layer neural network
      model:add(nn.View(nstates[2]*filtsize*filtsize))
      model:add(nn.Linear(nstates[2]*filtsize*filtsize, nstates[3]))
      model:add(nn.ReLU())
      model:add(nn.Linear(nstates[3], noutputs))



==> processing options	
==> switching to CUDA	
==> executing all	
==> downloading dataset	
==> using reduced training data, with part of that as test/validation data	
==> loading dataset	
==> preprocessing data	
==> preprocessing data: normalize globally	
==> verify statistics	
training data mean: -1.5106435531228e-08	
training data standard deviation: 1.0000000156287	
test data mean: 0.012629995727272	
test data standard deviation: 1.0162751665024	
==> visualizing data	
==> define parameters	
==> construct model	
==> here is the model:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]
  (1): nn.SpatialDropout(0.500000)
  (2): nn.SpatialConvolutionMM(1 -> 64, 5x5)
  (3): nn.ReLU
  (4): nn.SpatialMaxPooling(2,2,2,2)
  (5): nn.SpatialConvolutionMM(64 -> 64, 5x5)
  (6): nn.ReLU
  (7): nn.SpatialMaxPooling(2,2,2,2)
  (8): nn.View
  (9): nn.Linear(1600 -> 128)
  (10): nn.ReLU
  (11): nn.Linear(128 -> 10)
}
==> define loss	
==> here is the loss function:	
nn.ClassNLLCriterion
==> defining some tools	
==> configuring optimizer	
==> defining training procedure	
==> defining test procedure	
==> training!	
==> doing epoch on training data:	
==> online epoch # 1 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.89731276035309ms	
ConfusionMatrix:
[[     593     243       1     142       1      11       4     204       6       1]   49.171% 	[class: 1]
 [       0     894       6     179       9      11       2     244       5       1]   66.173% 	[class: 2]
 [       4     271     546     135       6       3       3     200       7       1]   46.429% 	[class: 3]
 [       9     262      12     667       0      22       2     242       7       5]   54.316% 	[class: 4]
 [       0     242       5     144     570       7       4     194       3      15]   48.142% 	[class: 5]
 [       4     226       4     112       1     485       7     183      22       4]   46.279% 	[class: 6]
 [       8     244       2     154       7      14     589     187       3       0]   48.758% 	[class: 7]
 [       2     276       9     154       3      10       1     797       1      26]   62.314% 	[class: 8]
 [       8     263       6     133       8      21       6     182     489      11]   43.390% 	[class: 9]
 [       7     281       3     141      22      12       5     217       7     498]]  41.744% 	[class: 0]
 + average row correct: 50.671468675137% 
 + average rowUcol correct (VOC measure): 38.443142324686% 
 + global correct: 51.066666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s652ms | Step: 0ms     

==> time to test 1 sample = 0.43588852882385ms	
ConfusionMatrix:
[[     190       0       1       0       0       0       5       0       0       3]   95.477% 	[class: 1]
 [       0     217       1       0       0       0       0       0       4       0]   97.748% 	[class: 2]
 [       0       0     181       1       0       0       1       4       4       0]   94.764% 	[class: 3]
 [       0       0       8     214       0       1       0       3       0       0]   94.690% 	[class: 4]
 [       0       1       1       1     174       0       0       3       0       5]   94.054% 	[class: 5]
 [       0       0       0       3       0     175       0       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       1       2     182       0       0       0]   98.378% 	[class: 7]
 [       0       1       1       0       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       0       0       1       4       0       0       0       0     201       0]   97.573% 	[class: 9]
 [       0       1       1       1       1       6       0       2       2     190]]  93.137% 	[class: 0]
 + average row correct: 96.266631484032% 
 + average rowUcol correct (VOC measure): 92.81244456768% 
 + global correct: 96.25%
0.96266631484032	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 2 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.89576625823975ms	
ConfusionMatrix:
[[     578     616       3       0       1       1       4       0       2       1]   47.927% 	[class: 1]
 [       0    1333       7       3       2       0       1       2       3       0]   98.668% 	[class: 2]
 [       2     579     578       6       1       1       0       4       4       1]   49.150% 	[class: 3]
 [       2     593       5     611       0       7       0       6       0       4]   49.756% 	[class: 4]
 [       0     600       0       0     571       0       3       1       0       9]   48.226% 	[class: 5]
 [       0     555       1       5       0     478       4       0       4       1]   45.611% 	[class: 6]
 [       2     612       0       0       0       4     587       0       3       0]   48.593% 	[class: 7]
 [       0     627       6       2       0       1       0     635       3       5]   49.648% 	[class: 8]
 [       4     583       6       0       1       4       0       2     521       6]   46.229% 	[class: 9]
 [       3     619       0       4       6       3       1       3       3     551]]  46.186% 	[class: 0]
 + average row correct: 52.999297380447% 
 + average rowUcol correct (VOC measure): 44.421233534813% 
 + global correct: 53.691666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s650ms | Step: 0ms     

==> time to test 1 sample = 0.44351100921631ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       3       0       1       0]   97.990% 	[class: 1]
 [       0     212       1       0       1       1       1       2       4       0]   95.495% 	[class: 2]
 [       0       0     177       0       1       0       1       4       8       0]   92.670% 	[class: 3]
 [       0       0       4     216       0       3       0       1       2       0]   95.575% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       3       0     175       0       0       0       0]   98.315% 	[class: 6]
 [       0       0       0       0       0       1     184       0       0       0]   99.459% 	[class: 7]
 [       0       0       0       0       0       0       0     202       1       1]   99.020% 	[class: 8]
 [       0       0       2       0       0       4       0       0     200       0]   97.087% 	[class: 9]
 [       0       0       0       0       2       1       0       1       3     197]]  96.569% 	[class: 0]
 + average row correct: 97.218049764633% 
 + average rowUcol correct (VOC measure): 94.528281092644% 
 + global correct: 97.15%
0.97218049764633	
==> found new best model!	
==> increasing patience from 5 to 5	
==> patience: 5	
==> doing epoch on training data:	
==> online epoch # 3 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.89382175604502ms	
ConfusionMatrix:
[[     585     612       2       0       0       0       4       2       1       0]   48.507% 	[class: 1]
 [       0    1338       4       1       1       1       1       2       2       1]   99.038% 	[class: 2]
 [       2     595     571       3       0       0       0       3       2       0]   48.554% 	[class: 3]
 [       0     603       6     611       0       3       1       1       1       2]   49.756% 	[class: 4]
 [       1     609       0       0     559       0       1       1       2      11]   47.213% 	[class: 5]
 [       1     518       0       5       1     518       3       0       2       0]   49.427% 	[class: 6]
 [       2     627       0       0       2       7     566       0       4       0]   46.854% 	[class: 7]
 [       1     642       3       1       1       0       0     626       0       5]   48.944% 	[class: 8]
 [       3     581       1       2       1       3       3       1     527       5]   46.761% 	[class: 9]
 [       2     605       0       2       9       1       0       6       2     566]]  47.443% 	[class: 0]
 + average row correct: 53.249917924404% 
 + average rowUcol correct (VOC measure): 44.763184189796% 
 + global correct: 53.891666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s622ms | Step: 0ms     

==> time to test 1 sample = 0.44060611724854ms	
ConfusionMatrix:
[[     195       0       0       0       0       0       4       0       0       0]   97.990% 	[class: 1]
 [       0     221       1       0       0       0       0       0       0       0]   99.550% 	[class: 2]
 [       0       0     183       0       1       0       1       3       3       0]   95.812% 	[class: 3]
 [       0       0       4     218       0       1       1       1       0       1]   96.460% 	[class: 4]
 [       0       0       0       0     184       0       0       0       1       0]   99.459% 	[class: 5]
 [       0       0       0       1       0     176       1       0       0       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       2       0       0       0       0     195       0       7]   95.588% 	[class: 8]
 [       0       2       3       0       0       0       0       0     198       3]   96.117% 	[class: 9]
 [       0       0       0       1       2       0       0       0       0     201]]  98.529% 	[class: 0]
 + average row correct: 97.838121056557% 
 + average rowUcol correct (VOC measure): 95.738409757614% 
 + global correct: 97.8%
0.97838121056557	
==> found new best model!	
==> increasing patience from 5 to 6	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 4 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.89354308446248ms	
ConfusionMatrix:
[[     579     534       0       0       0       1       2      86       2       2]   48.010% 	[class: 1]
 [       0    1267       2       2       0       0       0      77       3       0]   93.782% 	[class: 2]
 [       0     517     582       3       0       0       0      69       3       2]   49.490% 	[class: 3]
 [       0     532       5     600       0       4       1      83       2       1]   48.860% 	[class: 4]
 [       0     543       1       0     572       0       0      61       1       6]   48.311% 	[class: 5]
 [       0     472       0       2       0     513       2      55       2       2]   48.950% 	[class: 6]
 [       4     518       0       0       1       2     597      83       3       0]   49.421% 	[class: 7]
 [       1     556       3       2       2       0       0     708       1       6]   55.356% 	[class: 8]
 [       2     511       4       1       0       3       4      75     524       3]   46.495% 	[class: 9]
 [       1     499       1       2       3       1       0      74       2     610]]  51.132% 	[class: 0]
 + average row correct: 53.980625271797% 
 + average rowUcol correct (VOC measure): 44.385882019997% 
 + global correct: 54.6%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s610ms | Step: 0ms     

==> time to test 1 sample = 0.4366739988327ms	
ConfusionMatrix:
[[     188       0       0       4       0       0       7       0       0       0]   94.472% 	[class: 1]
 [       0     219       1       0       1       0       1       0       0       0]   98.649% 	[class: 2]
 [       0       0     178       5       1       0       1       5       1       0]   93.194% 	[class: 3]
 [       0       0       1     223       0       1       0       0       1       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       2       0     174       1       0       1       0]   97.753% 	[class: 6]
 [       0       0       0       0       1       1     183       0       0       0]   98.919% 	[class: 7]
 [       0       0       0       2       0       0       0     201       0       1]   98.529% 	[class: 8]
 [       0       1       1       7       0       4       2       0     191       0]   92.718% 	[class: 9]
 [       0       0       0       1       2       0       0       0       0     201]]  98.529% 	[class: 0]
 + average row correct: 97.143629193306% 
 + average rowUcol correct (VOC measure): 94.515024423599% 
 + global correct: 97.15%
0.97143629193306	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 5 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.89505583047867ms	
ConfusionMatrix:
[[     580     470       0       0       0       0       1     153       1       1]   48.093% 	[class: 1]
 [       0    1205       2       2       0       0       0     141       1       0]   89.193% 	[class: 2]
 [       0     467     597       2       1       0       0     107       2       0]   50.765% 	[class: 3]
 [       0     481       3     610       0       5       0     125       2       2]   49.674% 	[class: 4]
 [       0     428       3       0     617       0       0     131       0       5]   52.111% 	[class: 5]
 [       0     434       1       3       0     504       4     100       1       1]   48.092% 	[class: 6]
 [       1     505       0       1       0       1     583     115       1       1]   48.262% 	[class: 7]
 [       0     525       2       2       1       0       0     741       1       7]   57.936% 	[class: 8]
 [       2     447       4       1       1       1       3     137     528       3]   46.850% 	[class: 9]
 [       2     510       0       1       4       1       0     105       2     568]]  47.611% 	[class: 0]
 + average row correct: 53.858730494976% 
 + average rowUcol correct (VOC measure): 44.032781869173% 
 + global correct: 54.441666666667%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s640ms | Step: 0ms     

==> time to test 1 sample = 0.4422105550766ms	
ConfusionMatrix:
[[     191       0       0       0       0       0       8       0       0       0]   95.980% 	[class: 1]
 [       0     222       0       0       0       0       0       0       0       0]   100.000% 	[class: 2]
 [       0       1     180       0       0       0       1       6       3       0]   94.241% 	[class: 3]
 [       0       1       2     219       0       2       0       2       0       0]   96.903% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       1       0     176       0       0       1       0]   98.876% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0       0       0       0       0     202       0       2]   99.020% 	[class: 8]
 [       0       1       1       1       0       0       0       0     202       1]   98.058% 	[class: 9]
 [       0       0       0       1       3       1       0       2       2     195]]  95.588% 	[class: 0]
 + average row correct: 97.866589426994% 
 + average rowUcol correct (VOC measure): 95.794435143471% 
 + global correct: 97.85%
0.97866589426994	
==> found new best model!	
==> not a significant improvement	
==> patience: 6	
==> doing epoch on training data:	
==> online epoch # 6 [batchSize = 16]	
 [============================================================ 11985/12000 ===========>.] ETA: 13ms | Step: 0ms         
==> time to learn 1 sample = 0.8950695792834ms	
ConfusionMatrix:
[[     584     284       0       0       0       0       2     336       0       0]   48.425% 	[class: 1]
 [       0    1016       1       0       0       0       0     333       1       0]   75.204% 	[class: 2]
 [       0     264     573       0       1       0       0     337       1       0]   48.724% 	[class: 3]
 [       0     292       2     611       0       2       0     321       0       0]   49.756% 	[class: 4]
 [       0     260       1       0     607       0       0     311       0       5]   51.267% 	[class: 5]
 [       0     221       0       1       1     532       1     291       1       0]   50.763% 	[class: 6]
 [       2     279       0       0       1       1     622     302       1       0]   51.490% 	[class: 7]
 [       0     312       3       3       1       0       0     957       2       1]   74.824% 	[class: 8]
 [       1     275       1       0       0       2       0     314     532       2]   47.205% 	[class: 9]
 [       2     281       0       1       2       1       0     296       2     608]]  50.964% 	[class: 0]
 + average row correct: 54.862161576748% 
 + average rowUcol correct (VOC measure): 44.634780734777% 
 + global correct: 55.35%
==> saving model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	
==> testing on test set:	
 [================================================================ 2000/2000 ==========>] Tot: 11s647ms | Step: 0ms     

==> time to test 1 sample = 0.446608543396ms	
ConfusionMatrix:
[[     183       0       0       0       2       0      13       0       1       0]   91.960% 	[class: 1]
 [       0     211       2       3       2       0       2       0       2       0]   95.045% 	[class: 2]
 [       0       0     180       3       1       0       1       4       2       0]   94.241% 	[class: 3]
 [       0       0       3     223       0       0       0       0       0       0]   98.673% 	[class: 4]
 [       0       0       0       0     185       0       0       0       0       0]   100.000% 	[class: 5]
 [       0       0       0       3       0     174       0       0       1       0]   97.753% 	[class: 6]
 [       0       0       0       0       0       0     185       0       0       0]   100.000% 	[class: 7]
 [       0       0       0      12       0       0       0     191       0       1]   93.627% 	[class: 8]
 [       0       1       1       0       2       0       0       0     202       0]   98.058% 	[class: 9]
 [       0       0       0       2      23       3       0       4       2     170]]  83.333% 	[class: 0]
 + average row correct: 95.269010066986% 
 + average rowUcol correct (VOC measure): 90.91400206089% 
 + global correct: 95.2%
0.95269010066986	
==> out of patience	
==> saving final model to /home/ankit/devel/deeplearning2016/assign1/mnist/results/model.net	

